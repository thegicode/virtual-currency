{
  "version": 3,
  "sources": ["../../../app/scripts/utils/helpers.ts", "../../../app/scripts/pages/backtest3/AppBacktest3.ts", "../../../app/scripts/pages/backtest3/index.ts"],
  "sourcesContent": ["export function cloneTemplate<T extends HTMLElement>(\n    template: HTMLTemplateElement\n) {\n    const content = template.content.firstElementChild;\n    if (!content) {\n        throw new Error(\"Template content is empty\");\n    }\n    return content.cloneNode(true) as T;\n}\n\nexport function updateElementsTextWithData<T>(data: T, container: HTMLElement) {\n    Object.entries(data as Record<string, unknown>).forEach(([key, value]) => {\n        const element = container.querySelector(`.${key}`) as HTMLElement;\n        // console.log(key, value, element);\n        element.textContent = String(value);\n    });\n}\n\nexport function roundToDecimalPlace(amount: number, point: number) {\n    const decimalPoint = Math.pow(10, point);\n    return Math.round(amount * decimalPoint) / decimalPoint;\n}\n", "/**\n * \uD22C\uC790\uC804\uB7B5 3 : \uB4C0\uC5BC \uBAA8\uBA58\uD140 + \uD604\uAE08 \uBE44\uC911 \uCD5C\uC18C 90%\n * \uAC70\uB798\uBE44\uC6A9 0.2% \uC801\uC6A9\n * \uD22C\uC790 \uB300\uC0C1 : \uC544\uBB34 \uAC00\uC0C1\uD654\uD3D0 3, 4\uAC1C \uC120\uD0DD\n * \uAC70\uB798\uBE44\uC6A9 : 0.2% \uC801\uC6A9\n * \uD22C\uC790\uC804\uB7B5\n *  - \uC120\uD0DD\uD55C \uAC00\uC0C1\uD654\uD3D0\uC758 \uACFC\uAC70 30\uC77C \uC218\uC775\uB960 \uCCB4\uD06C\n *  - \uCD5C\uADFC 30\uC77C\uAC04 \uAC00\uC7A5 \uC218\uC775\uB960\uC774 \uC88B\uC740 \uAC00\uC0C1\uD654\uD3D0\uC5D0\uC11C \uC790\uC0B0\uC758 10% \uD22C\uC785\n *  - \uCD5C\uADFC 30\uC77C\uAC04 \uAC00\uC7A5 \uC218\uC775\uB960\uC774 \uC88B\uC740 \uAC00\uC0C1\uD654\uD3D0\uAC00 \uBC14\uB014 \uACBD\uC6B0 \uAE30\uC874 \uBCF4\uC720 \uD654\uD3D0 \uB9E4\uB3C4, \uC0C8\uB85C\uC6B4 \uD654\uD3D0 \uB9E4\uC218\n *  - \uC120\uD0DD\uD55C \uBAA8\uB4E0 \uAC00\uC0C1\uD654\uD3D0\uC758 30\uC77C \uC218\uC775\uB960\uC774 \uB9C8\uC774\uB108\uC2A4\uB85C \uB3CC\uC544\uC124 \uACBD\uC6B0 \uBAA8\uB4E0 \uAC00\uC0C1\uD654\uD3D0 \uB9E4\uB3C4, \uD604\uAE08 \uBCF4\uC720\n *\n * \uCD1D \uC218\uC775 : -36394.87781 -> \uB9C8\uC774\uB108\uC2A4\n * \uC0C1\uC2B9\uC7A5\uC5D0\uC11C \uC88B\uC740 \uBC29\uBC95, \uD558\uB77D\uC7A5\uC5D0\uC11C\uB294 \uC190\uC2E4\uC774 \uD06C\uB2E4.\n *\n */\n\nimport {\n    cloneTemplate,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\n\nexport default class AppBacktest3 extends HTMLElement {\n    private markets: string[];\n    private investmentPrice: number;\n    private data: IBackTestData3[];\n    private qqqData: any;\n    private tradeData: any[];\n    private count: number;\n    private totalGain: number;\n    private totalUnrealizeGain: number;\n    private template: HTMLTemplateElement;\n    private countElement: HTMLInputElement;\n    private formElement: HTMLFormElement;\n    private containerElement: HTMLElement;\n\n    constructor() {\n        super();\n\n        this.markets = [\n            \"KRW-ONG\",\n            \"KRW-TFUEL\",\n            \"KRW-GLM\",\n            \"KRW-ONT\",\n            \"KRW-HBAR\",\n        ];\n        this.investmentPrice = 100000;\n        this.data = [];\n        this.qqqData = {};\n        this.tradeData = [];\n        this.count = 30;\n        this.totalGain = 0;\n        this.totalUnrealizeGain = 0;\n\n        this.template = document.querySelector(\n            \"#tp-item\"\n        ) as HTMLTemplateElement;\n        this.countElement = this.querySelector(\n            \"input[name=count]\"\n        ) as HTMLInputElement;\n        this.formElement = this.querySelector(\"form\") as HTMLFormElement;\n        this.containerElement = this.querySelector(\"tbody\") as HTMLElement;\n\n        this.onOptionSubmit = this.onOptionSubmit.bind(this);\n    }\n\n    async connectedCallback() {\n        this.initialize();\n\n        // market \uBCC0\uACBD\n        this.markets = await this.setMarkets();\n\n        this.runBackTest();\n\n        this.formElement.addEventListener(\"submit\", this.onOptionSubmit);\n    }\n\n    disconnectedCallback() {\n        this.formElement.removeEventListener(\"submit\", this.onOptionSubmit);\n    }\n\n    private initialize() {\n        this.countElement.value = this.count.toString();\n        (this.querySelector(\".investmentPrice\") as HTMLElement).textContent =\n            this.investmentPrice.toLocaleString();\n    }\n\n    private async setMarkets() {\n        const marketAll = await this.getMarkets();\n        const idx = 40; // 40, 14%\n        // const idx = marketAll.length - 21;\n        return marketAll.slice(idx, idx + 10).map((m: any) => m.market);\n    }\n\n    private async getMarkets() {\n        const response = await fetch(`/fetchMarketAll`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private async runBackTest() {\n        const toDate = this.getToDate();\n        this.data = await this.loadData(toDate, (this.count + 30).toString());\n        this.qqqData = this.transformData();\n        this.tradeData = [];\n        this.totalGain = 0;\n        this.totalUnrealizeGain = 0;\n\n        this.containerElement.innerHTML = \"\";\n\n        for (let index = 0; index < this.count; index++) {\n            // \uD55C\uB2EC \uB370\uC774\uD130 \uD14C\uC2A4\uD2B8\n            const testMonthData = this.getTestData(index);\n\n            // \uD55C\uB2EC \uB370\uC774\uD130 \uC774\uC728\n            const marketTestRates = this.getMarketTestRates(testMonthData);\n\n            // \uAC70\uB798 \uB0A0\uC9DC\n            const tradeDate = testMonthData[0].tradeDate;\n            console.log(index, tradeDate);\n\n            // \uD14C\uC2A4\uD2B8 \uACB0\uACFC \uC218\uC775\uC774 \uB09C \uCF54\uC778 \uC815\uB82C\n            const sortedMarkets = this.getSortedMarkets(marketTestRates);\n\n            // \uAC70\uB798\uD560 \uCF54\uC778 \uBAA9\uB85D \uAC00\uC838\uC624\uAE30\n            const tradeMarkets = this.getTradeMarkets(sortedMarkets);\n\n            // \uAC70\uB798 \uB370\uC774\uD130\n            const tradeData = this.getTradeData(tradeMarkets, index);\n\n            // \uAC70\uB798\uD558\uB294 \uB370\uC774\uD130 \uC815\uBE44\n            const formedTradeData = this.setTradeData(\n                tradeData,\n                index,\n                tradeDate\n            );\n\n            this.tradeData.push(formedTradeData);\n\n            // Hold, Sell \uC774\uC724\n            const { tradeProfits, selledProfits, sumGain, SumUnrealizeGain } =\n                this.getTradeProfits(tradeData, index, formedTradeData);\n\n            this.render(\n                index,\n                tradeDate,\n                tradeProfits,\n                selledProfits,\n                sumGain,\n                SumUnrealizeGain\n            );\n        }\n\n        // console.log(this.tradeData);\n\n        this.renderSummary();\n    }\n\n    private getToDate() {\n        const now = new Date();\n        now.setMonth(now.getMonth());\n        now.setDate(now.getDate());\n        now.setHours(18, 0, 0, 0);\n        return now.toISOString().slice(0, 19);\n    }\n\n    private async loadData(toDate: string, count: string) {\n        const promises = this.markets.map(async (market) => {\n            const candles = await this.getCandles(market, count, toDate);\n            return {\n                market,\n                candles,\n            };\n        });\n        return await Promise.all(promises);\n    }\n\n    private transformData() {\n        const data = [...this.data];\n        let newData: IMarketCandles = {};\n        data.forEach(({ market, candles }) => {\n            newData[market] = candles;\n        });\n\n        // const newData: IMarketCandles = this.data.reduce(\n        //     (acc, { market, candles }) => {\n        //         acc[market] = candles;\n        //         return acc;\n        //     },\n        //     {}\n        // );\n\n        return newData;\n    }\n\n    private getTestData(index: number) {\n        const testMonthData = this.data.map(({ market, candles }) => {\n            const newCandles = candles.slice(index, 30 + index);\n            const tradeDate = candles[index + 30].candle_date_time_kst;\n\n            return {\n                market,\n                candles: newCandles,\n                tradeDate,\n            };\n        });\n\n        return testMonthData;\n    }\n\n    private async getCandles(market: string, count: string, to: string) {\n        const searchParams = new URLSearchParams({\n            market: market,\n            count,\n            to,\n        });\n\n        const response = await fetch(`/fetchCandles?${searchParams}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private getMarketTestRates(\n        oneMonthData: IBackTestData3[] // array\n    ) {\n        const marketTestRates = oneMonthData.map(({ market, candles }) => {\n            const startPrice = candles[0].trade_price;\n            const lastPrice = candles[candles.length - 1].trade_price;\n            const rate = (lastPrice - startPrice) / startPrice;\n            return {\n                market,\n                rate: rate * 100,\n            };\n        });\n\n        return marketTestRates;\n    }\n\n    private getSortedMarkets(\n        marketRates: IMarketWithRate[]\n        // qqqMarketTestRates: any\n    ) {\n        const markets = [...marketRates].sort((a, b) => b.rate - a.rate);\n        const sortedMarkets = markets.filter((aMarket) => aMarket.rate > 0);\n\n        // const qqqSortedMarkets = Object.entries(qqqMarketTestRates)\n        //     .sort((a: any, b: any) => b[1] - a[1])\n        //     .filter((item: any) => item[1] > 0);\n\n        return sortedMarkets;\n    }\n\n    private getTradeMarkets(\n        markets: IMarketWithRate[]\n        // qqqMarketTestRates: any\n    ) {\n        const newMarkets = markets\n            .filter((aMarket) => {\n                if (aMarket.rate > 0) return aMarket;\n            })\n            .map((aMarket) => aMarket.market);\n        const tradeMarkets =\n            newMarkets.length > 3 ? newMarkets.slice(0, 3) : newMarkets;\n\n        // const qqqMarkets = Object.entries(qqqMarketTestRates)\n        //     .filter(([market, rate]: any) => rate > 0)\n        //     .map(([market, rate]) => market);\n\n        // const qqqTradeMarkets =\n        //     qqqMarkets.length > 3 ? qqqMarkets.slice(0, 3) : qqqMarkets;\n\n        return tradeMarkets;\n    }\n\n    private getTradeData(tradeMarkets: string[], index: number) {\n        const tradeIndex = 30 + index;\n\n        // const marketNames = this.data.map((aMarketData) => aMarketData.market);\n        // const tradeData = tradeMarkets.map((market: string) => {\n        //     const index = marketNames.indexOf(market);\n        //     const candles = this.data[index].candles;\n        //     return {\n        //         market,\n        //         candles: [candles[tradeIndex - 1], candles[tradeIndex]],\n        //     };\n        // });\n\n        const tradeData: any = {};\n        tradeMarkets.forEach((market) => {\n            tradeData[market] = [\n                this.qqqData[market][tradeIndex - 1],\n                this.qqqData[market][tradeIndex],\n            ];\n        });\n\n        return tradeData;\n    }\n\n    private setTradeData(\n        tradeData: IMarketCandles,\n        index: number,\n        date: string\n    ) {\n        const prevTrades = index > 0 && this.tradeData[index - 1].tradeMarkets;\n        const prevMarkets = Object.keys(prevTrades);\n\n        let tradeMarkets: ITradeMarket = {};\n        for (const market in tradeData) {\n            tradeMarkets[market] = {\n                action: prevMarkets.includes(market) ? \"Hold\" : \"Buy\",\n            };\n        }\n\n        const sellMarkets = prevMarkets.filter(\n            (prevMarket) => !Object.keys(tradeData).includes(prevMarket)\n        );\n\n        return {\n            date,\n            tradeMarkets,\n            sellMarkets,\n        };\n    }\n\n    private getTradeProfits(\n        newTradeData: any, // object\n        index: number,\n        formedTradeData: any\n    ) {\n        //  todo - formedTradeData clonedeep\n        // set buy_price\n        for (const market in formedTradeData.tradeMarkets) {\n            let buyPrice = 0;\n            const action = formedTradeData.tradeMarkets[market].action;\n\n            const candles = newTradeData[market];\n\n            switch (action) {\n                case \"Buy\":\n                    buyPrice = candles[1].trade_price;\n                    break;\n                case \"Hold\":\n                    buyPrice =\n                        this.tradeData[index - 1].tradeMarkets[market]\n                            .buy_price;\n\n                    break;\n            }\n\n            formedTradeData.tradeMarkets[market] = {\n                ...formedTradeData.tradeMarkets[market],\n                buy_price: buyPrice,\n            };\n        }\n\n        // new Profits\n        const tradeProfits = Object.entries(newTradeData).map(\n            ([market, candles]: [string, any]) => {\n                const marketTradeData = formedTradeData.tradeMarkets[market];\n                switch (marketTradeData.action) {\n                    case \"Hold\":\n                        const distance =\n                            candles[1].trade_price - marketTradeData.buy_price;\n                        const rate = distance / marketTradeData.buy_price;\n                        const gain = this.investmentPrice * rate;\n\n                        return {\n                            market,\n                            rate: rate,\n                            gain: gain,\n                        };\n                    default: // \"Buy\";\n                        return {\n                            market,\n                            rate: 0,\n                            gain: 0,\n                        };\n                }\n            }\n        );\n\n        // sell Market Profits\n        const selledProfits =\n            formedTradeData.sellMarkets &&\n            formedTradeData.sellMarkets.map((market: string) => {\n                const buyPrice =\n                    this.tradeData[index - 1].tradeMarkets[market].buy_price;\n                const aData = this.qqqData[market][30 + index];\n                const rate = (aData.trade_price - buyPrice) / buyPrice;\n                const gain = this.investmentPrice * rate;\n\n                return {\n                    market,\n                    rate,\n                    gain,\n                };\n            });\n\n        const sumGain = selledProfits.reduce((acc: number, value: any) => {\n            return acc + value.gain;\n        }, 0);\n\n        const SumUnrealizeGain = [...tradeProfits].reduce(\n            (acc: number, value: any) => {\n                return acc + value.gain;\n            },\n            0\n        );\n\n        this.totalGain += sumGain;\n\n        this.totalUnrealizeGain = this.totalGain + SumUnrealizeGain;\n\n        return {\n            tradeProfits,\n            selledProfits,\n            sumGain,\n            SumUnrealizeGain,\n        };\n    }\n\n    private render(\n        index: number,\n        tradeDate: string,\n        tradeProfits: ITradeProfits[],\n        selledProfits: any,\n        sumGain: number,\n        SumUnrealizeGain: number\n    ) {\n        const cloned = cloneTemplate(this.template);\n\n        const buyContainer = this.renderBuySell(tradeProfits);\n        const sellContainer = this.renderBuySell(selledProfits);\n\n        if (selledProfits.length > 0) {\n            cloned.dataset.action = \"Sell\";\n        }\n\n        cloned.querySelector(\".tradeMarkets\")?.appendChild(buyContainer);\n        cloned.querySelector(\".sellMarkets\")?.appendChild(sellContainer);\n\n        const data = {\n            index,\n            date: tradeDate,\n            SumUnrealizeGain: Math.round(SumUnrealizeGain).toLocaleString(),\n            sumGain: Math.round(sumGain).toLocaleString(),\n            totalGain: Math.round(this.totalGain).toLocaleString(),\n            totalUnrealizeGain: Math.round(\n                this.totalUnrealizeGain\n            ).toLocaleString(),\n        };\n        updateElementsTextWithData(data, cloned);\n\n        // cloned.dataset.\n\n        this.containerElement.appendChild(cloned);\n    }\n\n    private renderBuySell(data: any[]) {\n        const tradeTp = document.querySelector(\n            \"#tp-trade\"\n        ) as HTMLTemplateElement;\n        const container = document.createElement(\"ul\") as HTMLUListElement;\n        data.map(({ market, rate, gain }) => {\n            const tradeData = {\n                market,\n                rate: (rate * 100).toFixed(2),\n                gain: Math.round(gain).toLocaleString(),\n            };\n            const clonedTrade = cloneTemplate(tradeTp);\n            updateElementsTextWithData(tradeData, clonedTrade);\n            return clonedTrade;\n        }).forEach((cloned) => container.appendChild(cloned));\n        return container;\n    }\n\n    private renderSummary() {\n        const priceElement = this.querySelector(\n            \".summaryAllPrice\"\n        ) as HTMLElement;\n        const rateElement = this.querySelector(\n            \".summaryAllRate\"\n        ) as HTMLElement;\n        const marketsElement = this.querySelector(\".markets\") as HTMLElement;\n        const countElement = this.querySelector(\".count\") as HTMLElement;\n        const sumRate = this.totalUnrealizeGain / (this.investmentPrice * 3);\n\n        priceElement.textContent = Math.round(\n            this.totalUnrealizeGain\n        ).toLocaleString();\n        rateElement.textContent = Math.round(sumRate * 100).toLocaleString();\n        marketsElement.textContent = this.markets.join(\" | \");\n        countElement.textContent = this.count.toString();\n    }\n\n    private onOptionSubmit(event: Event) {\n        event?.preventDefault();\n        const maxSize = Number(this.countElement.getAttribute(\"max\"));\n        const value = Number(this.countElement.value);\n\n        this.count = value > maxSize ? maxSize : value;\n\n        this.runBackTest();\n    }\n}\n", "import AppBacktest3 from \"./AppBacktest3\";\n\ncustomElements.define(\"app-backtest2\", AppBacktest3);\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../app/scripts/pages/backtest3/AppBacktest3.ts", "../../../app/scripts/pages/backtest3/index.ts"],
  "sourcesContent": ["/**\n * \uD22C\uC790\uC804\uB7B5 3 : \uB4C0\uC5BC \uBAA8\uBA58\uD140 + \uD604\uAE08 \uBE44\uC911 \uCD5C\uC18C 90%\n * \uAC70\uB798\uBE44\uC6A9 0.2% \uC801\uC6A9\n * \uD22C\uC790 \uB300\uC0C1 : \uC544\uBB34 \uAC00\uC0C1\uD654\uD3D0 3, 4\uAC1C \uC120\uD0DD\n * \uAC70\uB798\uBE44\uC6A9 : 0.2% \uC801\uC6A9\n * \uD22C\uC790\uC804\uB7B5\n *  - \uC120\uD0DD\uD55C \uAC00\uC0C1\uD654\uD3D0\uC758 \uACFC\uAC70 30\uC77C \uC218\uC775\uB960 \uCCB4\uD06C\n *  - \uCD5C\uADFC 30\uC77C\uAC04 \uAC00\uC7A5 \uC218\uC775\uB960\uC774 \uC88B\uC740 \uAC00\uC0C1\uD654\uD3D0\uC5D0\uC11C \uC790\uC0B0\uC758 10% \uD22C\uC785\n *  - \uCD5C\uADFC 30\uC77C\uAC04 \uAC00\uC7A5 \uC218\uC775\uB960\uC774 \uC88B\uC740 \uAC00\uC0C1\uD654\uD3D0\uAC00 \uBC14\uB014 \uACBD\uC6B0 \uAE30\uC874 \uBCF4\uC720 \uD654\uD3D0 \uB9E4\uB3C4, \uC0C8\uB85C\uC6B4 \uD654\uD3D0 \uB9E4\uC218\n *  - \uC120\uD0DD\uD55C \uBAA8\uB4E0 \uAC00\uC0C1\uD654\uD3D0\uC758 30\uC77C \uC218\uC775\uB960\uC774 \uB9C8\uC774\uB108\uC2A4\uB85C \uB3CC\uC544\uC124 \uACBD\uC6B0 \uBAA8\uB4E0 \uAC00\uC0C1\uD654\uD3D0 \uB9E4\uB3C4, \uD604\uAE08 \uBCF4\uC720\n *\n * \uCD1D \uC218\uC775 : -36394.87781 -> \uB9C8\uC774\uB108\uC2A4\n * \uC0C1\uC2B9\uC7A5\uC5D0\uC11C \uC88B\uC740 \uBC29\uBC95, \uD558\uB77D\uC7A5\uC5D0\uC11C\uB294 \uC190\uC2E4\uC774 \uC788\uB2E4.\n *\n */\n\nexport default class AppBacktest3 extends HTMLElement {\n    private markets: string[];\n    private investmentPrice: number;\n    private profit: number[];\n\n    constructor() {\n        super();\n\n        this.markets = [\"KRW-BTC\", \"KRW-ETH\", \"KRW-DOGE\", \"KRW-SBD\", \"KRW-XRP\"];\n        this.investmentPrice = 200000;\n        this.profit = [];\n    }\n\n    connectedCallback() {\n        this.story();\n    }\n\n    // disconnectedCallback() {}\n\n    private async story() {\n        // for (let index = 0; index < 30; index++) {\n        try {\n            const toDate = this.getTestDate(0);\n            const oneMonthData = await this.loadData(toDate);\n\n            // if (!oneMonthData) {\n            //     console.error(\"Failed to load data for date:\", toDate);\n            //     continue;\n            // }\n\n            const marketWithRates = this.getMarketWithRates(oneMonthData);\n            const sortedMarkets = this.getSortedMarkets(marketWithRates);\n            const tradeMarkets = this.getTradeMarkets(sortedMarkets);\n\n            console.log(\"tradeMarkets\", tradeMarkets);\n\n            const profit = await this.trade(tradeMarkets, toDate);\n            this.profit.push(profit);\n            // console.log(profit);\n        } catch (error) {\n            console.error(\n                \"An error occurred during the story execution:\",\n                error\n            );\n        }\n        // }\n    }\n\n    private async loadData(toDate: string) {\n        const promises = this.markets.map(async (market) => {\n            const candles = await this.getCandles(market, \"30\", toDate);\n            return {\n                market,\n                candles,\n            };\n        });\n        return await Promise.all(promises);\n    }\n\n    private async getCandles(market: string, count: string, to: string) {\n        const searchParams = new URLSearchParams({\n            market: market,\n            count,\n            to,\n        });\n\n        const response = await fetch(`/fetchCandles?${searchParams}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private getMarketWithRates(oneMonthData: any) {\n        return oneMonthData.map(({ market, candles }: any) => {\n            const startPrice = candles[0].trade_price;\n            const lastPrice = candles[candles.length - 1].trade_price;\n            const rate = (lastPrice - startPrice) / startPrice;\n            return {\n                market,\n                rate: rate * 100,\n            };\n        });\n    }\n\n    private getSortedMarkets(marketRates: any) {\n        const sortedMarkets = [...marketRates].sort(\n            (a: any, b: any) => b.rate - a.rate\n        );\n        const newMarkets = sortedMarkets.filter(\n            (aMarket: any) => aMarket.rate > 0\n        );\n\n        return newMarkets;\n    }\n\n    private renderSortedMarkets(markets: IMarketWithRate[]) {\n        const resultElement = this.querySelector(\".list\") as HTMLElement;\n        let markupStrings = \"\";\n\n        if (markets.length === 0) {\n            markupStrings =\n                \"\uBAA8\uB4E0 \uAC00\uC0C1\uD654\uD3D0\uC758 30\uC77C \uC218\uC775\uB960\uC774 \uB9C8\uC774\uB108\uC2A4\uC785\uB2C8\uB2E4. <br>\uBAA8\uB4E0 \uCF54\uC778\uC744 \uB9E4\uB3C4\uD558\uC138\uC694.\";\n        }\n\n        markets.forEach((aMarket: any) => {\n            markupStrings += `<li><dl><dt>${\n                aMarket.market\n            }</dt><dd>${aMarket.rate.toFixed(2)}%</dd></dl></li>`;\n        });\n        resultElement.innerHTML = markupStrings;\n    }\n\n    private getTradeMarkets(markets: IMarketWithRate[]) {\n        const newMarkets = markets\n            .filter((aMarket) => {\n                if (aMarket.rate > 0) return aMarket;\n            })\n            .map((aMarket) => aMarket.market);\n\n        return newMarkets.length > 3 ? newMarkets.slice(0, 3) : newMarkets;\n    }\n\n    private async trade(markets: string[], toDate: string) {\n        const marketsData = await this.loadData2(markets, toDate);\n        const result = marketsData\n            .map((aMarket, index) => {\n                const distance =\n                    aMarket[1].trade_price - aMarket[0].trade_price;\n                const rate = distance / aMarket[0].trade_price;\n                const gain = this.investmentPrice * rate;\n\n                // console.log(\n                //     markets[index],\n                //     distance.toLocaleString(),\n                //     rate * 100,\n                //     Math.round(gain).toLocaleString()\n                // );\n\n                return gain;\n            })\n            .reduce((acc, value) => {\n                return acc + value;\n            }, 0);\n\n        return result;\n    }\n\n    private async loadData2(markets: string[], toDate: string) {\n        const newToDate = this.getTradeDate(toDate);\n        console.log(\"newToDate\", newToDate);\n        const promises = markets.map(async (market) => {\n            return await this.getCandles(market, \"2\", newToDate);\n        });\n        return await Promise.all(promises);\n    }\n\n    private getTestDate(index: number) {\n        const now = new Date();\n        now.setMonth(now.getMonth() - 1);\n        now.setDate(now.getDate() + index);\n        now.setHours(18, 0, 0, 0);\n        return now.toISOString().slice(0, 19);\n    }\n\n    private getTradeDate(toDate: string) {\n        const newDate = new Date(toDate);\n        newDate.setDate(newDate.getDate() + 1);\n        newDate.setHours(18, 0, 0, 0);\n        return newDate.toISOString().slice(0, 19);\n    }\n}\n\n// const marketRates = [\n//     {\n//         market: \"KRW-BTC\",\n//         rate: 20,\n//     },\n//     { market: \"KRW-ETH\", rate: 10 },\n//     { market: \"KRW-XRP\", rate: -0.2 },\n// ];\n", "import AppBacktest3 from \"./AppBacktest3\";\n\ncustomElements.define(\"app-backtest2\", AppBacktest3);\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../app/scripts/utils/helpers.ts", "../../../app/scripts/pages/backtest3/AppBacktest3.ts", "../../../app/scripts/pages/backtest3/index.ts"],
  "sourcesContent": ["export function cloneTemplate<T extends HTMLElement>(\n    template: HTMLTemplateElement\n) {\n    const content = template.content.firstElementChild;\n    if (!content) {\n        throw new Error(\"Template content is empty\");\n    }\n    return content.cloneNode(true) as T;\n}\n\nexport function updateElementsTextWithData<T>(data: T, container: HTMLElement) {\n    Object.entries(data as Record<string, unknown>).forEach(([key, value]) => {\n        const element = container.querySelector(`.${key}`) as HTMLElement;\n        // console.log(key, value, element);\n        element.textContent = String(value);\n    });\n}\n\nexport function roundToDecimalPlace(amount: number, point: number) {\n    const decimalPoint = Math.pow(10, point);\n    return Math.round(amount * decimalPoint) / decimalPoint;\n}\n", "/**\n * \uD22C\uC790\uC804\uB7B5 3 : \uB4C0\uC5BC \uBAA8\uBA58\uD140 + \uD604\uAE08 \uBE44\uC911 \uCD5C\uC18C 90%\n * \uAC70\uB798\uBE44\uC6A9 0.2% \uC801\uC6A9\n * \uD22C\uC790 \uB300\uC0C1 : \uC544\uBB34 \uAC00\uC0C1\uD654\uD3D0 3, 4\uAC1C \uC120\uD0DD\n * \uAC70\uB798\uBE44\uC6A9 : 0.2% \uC801\uC6A9\n * \uD22C\uC790\uC804\uB7B5\n *  - \uC120\uD0DD\uD55C \uAC00\uC0C1\uD654\uD3D0\uC758 \uACFC\uAC70 30\uC77C \uC218\uC775\uB960 \uCCB4\uD06C\n *  - \uCD5C\uADFC 30\uC77C\uAC04 \uAC00\uC7A5 \uC218\uC775\uB960\uC774 \uC88B\uC740 \uAC00\uC0C1\uD654\uD3D0\uC5D0\uC11C \uC790\uC0B0\uC758 10% \uD22C\uC785\n *  - \uCD5C\uADFC 30\uC77C\uAC04 \uAC00\uC7A5 \uC218\uC775\uB960\uC774 \uC88B\uC740 \uAC00\uC0C1\uD654\uD3D0\uAC00 \uBC14\uB014 \uACBD\uC6B0 \uAE30\uC874 \uBCF4\uC720 \uD654\uD3D0 \uB9E4\uB3C4, \uC0C8\uB85C\uC6B4 \uD654\uD3D0 \uB9E4\uC218\n *  - \uC120\uD0DD\uD55C \uBAA8\uB4E0 \uAC00\uC0C1\uD654\uD3D0\uC758 30\uC77C \uC218\uC775\uB960\uC774 \uB9C8\uC774\uB108\uC2A4\uB85C \uB3CC\uC544\uC124 \uACBD\uC6B0 \uBAA8\uB4E0 \uAC00\uC0C1\uD654\uD3D0 \uB9E4\uB3C4, \uD604\uAE08 \uBCF4\uC720\n *\n * \uCD1D \uC218\uC775 : -36394.87781 -> \uB9C8\uC774\uB108\uC2A4\n * \uC0C1\uC2B9\uC7A5\uC5D0\uC11C \uC88B\uC740 \uBC29\uBC95, \uD558\uB77D\uC7A5\uC5D0\uC11C\uB294 \uC190\uC2E4\uC774 \uC788\uB2E4.\n *\n */\n\nimport {\n    cloneTemplate,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\n\nexport default class AppBacktest3 extends HTMLElement {\n    private markets: string[];\n    private investmentPrice: number;\n    private profit: number[];\n    private data: IBackTestData3[];\n    private sum: number;\n    private template: HTMLTemplateElement;\n    private container: HTMLElement;\n\n    constructor() {\n        super();\n\n        this.markets = [\"KRW-BTC\", \"KRW-ETH\", \"KRW-DOGE\", \"KRW-SBD\", \"KRW-XRP\"];\n        this.investmentPrice = 200000;\n        this.profit = [];\n        this.data = [];\n        this.sum = 0;\n\n        this.template = document.querySelector(\n            \"#tp-item\"\n        ) as HTMLTemplateElement;\n        this.container = this.querySelector(\"tbody\") as HTMLElement;\n    }\n\n    async connectedCallback() {\n        const toDate = this.getToDate();\n        this.data = await this.loadData(toDate, \"60\");\n\n        this.runBackTest();\n    }\n\n    // disconnectedCallback() {}\n\n    private async runBackTest() {\n        for (let index = 0; index < 30; index++) {\n            const testMonthData = this.getTestData(index);\n            const marketWithRates = this.getMarketWithRates(testMonthData);\n            const sortedMarkets = this.getSortedMarkets(marketWithRates);\n            const tradeMarkets = this.getTradeMarkets(sortedMarkets);\n            const tradeData = this.getTradeData(tradeMarkets, index);\n            const profit = this.calculateTradeProfit(tradeData);\n            this.profit.push(profit);\n\n            const tradeDate = testMonthData[0].candles[29].candle_date_time_kst;\n            this.render(index, tradeDate, tradeMarkets, profit);\n        }\n\n        this.sum = this.profit.reduce((acc: number, value: number) => {\n            return acc + value;\n        }, 0);\n\n        const sumElement = this.querySelector(\".sum\") as HTMLElement;\n        sumElement.textContent = Math.round(this.sum).toLocaleString();\n    }\n\n    render(\n        index: number,\n        tradeDate: string,\n        tradeMarkets: string[],\n        profit: number\n    ) {\n        const cloned = cloneTemplate(this.template);\n        const data = {\n            index,\n            date: tradeDate,\n            tradeMarkets: tradeMarkets.join(\" | \"),\n            profit: Math.round(profit).toLocaleString(),\n        };\n        updateElementsTextWithData(data, cloned);\n        this.container.appendChild(cloned);\n    }\n\n    private getToDate() {\n        const now = new Date();\n        now.setMonth(now.getMonth());\n        now.setDate(now.getDate());\n        now.setHours(18, 0, 0, 0);\n        return now.toISOString().slice(0, 19);\n    }\n\n    private async loadData(toDate: string, count: string) {\n        const promises = this.markets.map(async (market) => {\n            const candles = await this.getCandles(market, count, toDate);\n            return {\n                market,\n                candles,\n            };\n        });\n        return await Promise.all(promises);\n    }\n\n    private getTestData(index: number) {\n        const testData = this.data.map(({ market, candles }) => {\n            const newCandles = candles.slice(index, 30 + index);\n            return {\n                market,\n                candles: newCandles,\n            };\n        });\n        return testData;\n    }\n\n    private async getCandles(market: string, count: string, to: string) {\n        const searchParams = new URLSearchParams({\n            market: market,\n            count,\n            to,\n        });\n\n        const response = await fetch(`/fetchCandles?${searchParams}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private getMarketWithRates(oneMonthData: IBackTestData3[]) {\n        return oneMonthData.map(({ market, candles }) => {\n            const startPrice = candles[0].trade_price;\n            const lastPrice = candles[candles.length - 1].trade_price;\n            const rate = (lastPrice - startPrice) / startPrice;\n            return {\n                market,\n                rate: rate * 100,\n            };\n        });\n    }\n\n    private getSortedMarkets(marketRates: IMarketWithRate[]) {\n        const sortedMarkets = [...marketRates].sort((a, b) => b.rate - a.rate);\n\n        const newMarkets = sortedMarkets.filter((aMarket) => aMarket.rate > 0);\n\n        return newMarkets;\n    }\n\n    private getTradeMarkets(markets: IMarketWithRate[]) {\n        const newMarkets = markets\n            .filter((aMarket) => {\n                if (aMarket.rate > 0) return aMarket;\n            })\n            .map((aMarket) => aMarket.market);\n\n        return newMarkets.length > 3 ? newMarkets.slice(0, 3) : newMarkets;\n    }\n\n    private getTradeData(tradeMarkets: string[], index: number) {\n        const tradeIndex = 30 + index;\n        const marketNames = this.data.map((aMarketData) => aMarketData.market);\n        const tradeData = tradeMarkets.map((market: string) => {\n            const index = marketNames.indexOf(market);\n            const candles = this.data[index].candles;\n            return {\n                market,\n                candles: [candles[tradeIndex - 1], candles[tradeIndex]],\n            };\n        });\n\n        return tradeData;\n    }\n\n    private calculateTradeProfit(tradeData: IBackTestData3[]) {\n        return tradeData\n            .map(({ candles }) => {\n                const distance =\n                    candles[1].trade_price - candles[0].trade_price;\n                const rate = distance / candles[0].trade_price;\n                return this.investmentPrice * rate;\n            })\n            .reduce((acc: number, value: number) => {\n                return acc + value;\n            }, 0);\n    }\n}\n", "import AppBacktest3 from \"./AppBacktest3\";\n\ncustomElements.define(\"app-backtest2\", AppBacktest3);\n"],
  "mappings": "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",
  "names": ["index"]
}

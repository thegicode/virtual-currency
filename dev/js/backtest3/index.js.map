{
  "version": 3,
  "sources": ["../../../app/scripts/utils/helpers.ts", "../../../app/scripts/pages/backtest3/AppBacktest3.ts", "../../../app/scripts/pages/backtest3/index.ts"],
  "sourcesContent": ["export function cloneTemplate<T extends HTMLElement>(\n    template: HTMLTemplateElement\n) {\n    const content = template.content.firstElementChild;\n    if (!content) {\n        throw new Error(\"Template content is empty\");\n    }\n    return content.cloneNode(true) as T;\n}\n\nexport function updateElementsTextWithData<T>(data: T, container: HTMLElement) {\n    Object.entries(data as Record<string, unknown>).forEach(([key, value]) => {\n        const element = container.querySelector(`.${key}`) as HTMLElement;\n        // console.log(key, value, element);\n        element.textContent = String(value);\n    });\n}\n\nexport function roundToDecimalPlace(amount: number, point: number) {\n    const decimalPoint = Math.pow(10, point);\n    return Math.round(amount * decimalPoint) / decimalPoint;\n}\n", "/**\n * \uD22C\uC790\uC804\uB7B5 3 : \uB4C0\uC5BC \uBAA8\uBA58\uD140 + \uD604\uAE08 \uBE44\uC911 \uCD5C\uC18C 90%\n * \uAC70\uB798\uBE44\uC6A9 0.2% \uC801\uC6A9\n * \uD22C\uC790 \uB300\uC0C1 : \uC544\uBB34 \uAC00\uC0C1\uD654\uD3D0 3, 4\uAC1C \uC120\uD0DD\n * \uAC70\uB798\uBE44\uC6A9 : 0.2% \uC801\uC6A9\n * \uD22C\uC790\uC804\uB7B5\n *  - \uC120\uD0DD\uD55C \uAC00\uC0C1\uD654\uD3D0\uC758 \uACFC\uAC70 30\uC77C \uC218\uC775\uB960 \uCCB4\uD06C\n *  - \uCD5C\uADFC 30\uC77C\uAC04 \uAC00\uC7A5 \uC218\uC775\uB960\uC774 \uC88B\uC740 \uAC00\uC0C1\uD654\uD3D0\uC5D0\uC11C \uC790\uC0B0\uC758 10% \uD22C\uC785\n *  - \uCD5C\uADFC 30\uC77C\uAC04 \uAC00\uC7A5 \uC218\uC775\uB960\uC774 \uC88B\uC740 \uAC00\uC0C1\uD654\uD3D0\uAC00 \uBC14\uB014 \uACBD\uC6B0 \uAE30\uC874 \uBCF4\uC720 \uD654\uD3D0 \uB9E4\uB3C4, \uC0C8\uB85C\uC6B4 \uD654\uD3D0 \uB9E4\uC218\n *  - \uC120\uD0DD\uD55C \uBAA8\uB4E0 \uAC00\uC0C1\uD654\uD3D0\uC758 30\uC77C \uC218\uC775\uB960\uC774 \uB9C8\uC774\uB108\uC2A4\uB85C \uB3CC\uC544\uC124 \uACBD\uC6B0 \uBAA8\uB4E0 \uAC00\uC0C1\uD654\uD3D0 \uB9E4\uB3C4, \uD604\uAE08 \uBCF4\uC720\n *\n * \uCD1D \uC218\uC775 : -36394.87781 -> \uB9C8\uC774\uB108\uC2A4\n * \uC0C1\uC2B9\uC7A5\uC5D0\uC11C \uC88B\uC740 \uBC29\uBC95, \uD558\uB77D\uC7A5\uC5D0\uC11C\uB294 \uC190\uC2E4\uC774 \uD06C\uB2E4.\n *\n */\n\nimport {\n    cloneTemplate,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\n\nexport default class AppBacktest3 extends HTMLElement {\n    private markets: string[];\n    private investmentPrice: number;\n    private profit: number[];\n    private data: IBackTestData3[];\n    private qqqData: any;\n    private template: HTMLTemplateElement;\n    private tradeData: any[];\n    private count: number;\n    private totalGain: number;\n    private totalUnrealizeGain: number;\n\n    constructor() {\n        super();\n\n        this.markets = [\"KRW-BTC\", \"KRW-ETH\", \"KRW-DOGE\", \"KRW-SBD\", \"KRW-XRP\"];\n        this.investmentPrice = 200000;\n        this.profit = [];\n        this.data = [];\n        this.qqqData = {};\n        this.tradeData = [];\n        this.count = 200;\n        this.totalGain = this.investmentPrice * 3;\n        this.totalUnrealizeGain = 0;\n\n        this.template = document.querySelector(\n            \"#tp-item\"\n        ) as HTMLTemplateElement;\n    }\n\n    async connectedCallback() {\n        const toDate = this.getToDate();\n        this.data = await this.loadData(toDate, this.count.toString());\n        this.qqqData = this.transformData();\n\n        this.runBackTest();\n    }\n\n    // disconnectedCallback() {}\n\n    private async runBackTest() {\n        for (let index = 0; index < 30; index++) {\n            // \uD55C\uB2EC \uB370\uC774\uD130 \uD14C\uC2A4\uD2B8, \uC218\uC775\uB960 \uACC4\uC0B0\n            const { testMonthData, qqqTestMonthData } = this.getTestData(index);\n            const {\n                marketTestRates,\n                qqqMarketTestRates, // \uC774\uAC74 \uBC30\uC5F4\uB85C?\n            } = this.getMarketTestRates(testMonthData, qqqTestMonthData);\n\n            // \uAC70\uB798 \uB0A0\uC9DC\n            const tradeDate = testMonthData[0].tradeDate;\n            console.log(index, tradeDate);\n\n            // \uD14C\uC2A4\uD2B8 \uACB0\uACFC \uC218\uC775\uC774 \uB09C \uCF54\uC778 \uC815\uB82C\n            const { sortedMarkets, qqqSortedMarkets } = this.getSortedMarkets(\n                marketTestRates,\n                qqqMarketTestRates // \uBC30\uC5F4 \uBC1B\uC544\uC11C \uCC98\uB9AC?\n            );\n\n            // \uAC70\uB798\uD560 \uCF54\uC778 \uBAA9\uB85D \uAC00\uC838\uC624\uAE30\n            const { tradeMarkets, qqqTradeMarkets } = this.getTradeMarkets(\n                sortedMarkets,\n                qqqMarketTestRates // sortedMarkets \uBC29\uC2DD\uC774 \uB354 \uB098\uC740 ?\n            );\n\n            // \uAC70\uB798 \uB370\uC774\uD130\n            const { tradeData, newTradeData } = this.getTradeData(\n                tradeMarkets,\n                index\n            );\n\n            // \uAC70\uB798\uD558\uB294 \uB370\uC774\uD130 \uC815\uBE44\n            const formedTradeData = this.setTradeData(\n                newTradeData,\n                index,\n                tradeDate\n            );\n\n            this.tradeData.push(formedTradeData);\n\n            // Hold, Sell \uC774\uC724\n            const { tradeProfits, selledProfits, sumGain, SumUnrealizeGain } =\n                this.getTradeProfits(\n                    tradeData,\n                    newTradeData,\n                    index,\n                    formedTradeData\n                );\n\n            this.profit.push(SumUnrealizeGain);\n\n            this.render(\n                index,\n                tradeDate,\n                tradeProfits,\n                selledProfits,\n                sumGain,\n                SumUnrealizeGain\n            );\n        }\n\n        // console.log(this.tradeData);\n\n        this.renderSummary();\n    }\n\n    private getToDate() {\n        const now = new Date();\n        now.setMonth(now.getMonth());\n        now.setDate(now.getDate());\n        now.setHours(18, 0, 0, 0);\n        return now.toISOString().slice(0, 19);\n    }\n\n    private async loadData(toDate: string, count: string) {\n        const promises = this.markets.map(async (market) => {\n            const candles = await this.getCandles(market, count, toDate);\n            // const qqqData = {\n            //     [market]: candles,\n            // };\n\n            return {\n                market,\n                candles,\n            };\n        });\n        return await Promise.all(promises);\n    }\n\n    private transformData() {\n        const data = [...this.data];\n        let newData: IMarketCandles = {};\n        data.forEach(({ market, candles }) => {\n            newData[market] = candles;\n        });\n\n        return newData;\n    }\n\n    private getTestData(index: number) {\n        const testMonthData = this.data.map(({ market, candles }) => {\n            const newCandles = candles.slice(index, 30 + index);\n            const tradeDate = candles[index + 30].candle_date_time_kst;\n\n            return {\n                market,\n                candles: newCandles,\n                tradeDate,\n            };\n        });\n\n        const qqqTestMonthData: any = {};\n        for (const market in this.qqqData) {\n            const candles = this.qqqData[market].slice(index, 30 + index);\n            const tradeDate =\n                this.qqqData[market][30 + index].candle_date_time_kst;\n            qqqTestMonthData[market] = {\n                candles,\n                tradeDate,\n            };\n        }\n\n        return { testMonthData, qqqTestMonthData };\n    }\n\n    private async getCandles(market: string, count: string, to: string) {\n        const searchParams = new URLSearchParams({\n            market: market,\n            count,\n            to,\n        });\n\n        const response = await fetch(`/fetchCandles?${searchParams}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private getMarketTestRates(\n        oneMonthData: IBackTestData3[],\n        qqqTestMonthData: any\n    ) {\n        const marketTestRates = oneMonthData.map(({ market, candles }) => {\n            const startPrice = candles[0].trade_price;\n            const lastPrice = candles[candles.length - 1].trade_price;\n            const rate = (lastPrice - startPrice) / startPrice;\n            return {\n                market,\n                rate: rate * 100,\n            };\n        });\n\n        const qqqMarketTestRates: any = {};\n        for (const market in qqqTestMonthData) {\n            const candles = qqqTestMonthData[market].candles;\n            const startPrice = candles[0].trade_price;\n            const lastPrice = candles[candles.length - 1].trade_price;\n            const rate = (lastPrice - startPrice) / startPrice;\n\n            qqqMarketTestRates[market] = rate * 100;\n        }\n\n        return {\n            marketTestRates,\n            qqqMarketTestRates,\n        };\n    }\n\n    private getSortedMarkets(\n        marketRates: IMarketWithRate[],\n        qqqMarketTestRates: any\n    ) {\n        const markets = [...marketRates].sort((a, b) => b.rate - a.rate);\n        const sortedMarkets = markets.filter((aMarket) => aMarket.rate > 0);\n\n        const qqqSortedMarkets = Object.entries(qqqMarketTestRates)\n            .sort((a: any, b: any) => b[1] - a[1])\n            .filter((item: any) => item[1] > 0);\n\n        return { sortedMarkets, qqqSortedMarkets };\n    }\n\n    private getTradeMarkets(\n        markets: IMarketWithRate[],\n        qqqMarketTestRates: any\n    ) {\n        const newMarkets = markets\n            .filter((aMarket) => {\n                if (aMarket.rate > 0) return aMarket;\n            })\n            .map((aMarket) => aMarket.market);\n        const tradeMarkets =\n            newMarkets.length > 3 ? newMarkets.slice(0, 3) : newMarkets;\n\n        const qqqMarkets = Object.entries(qqqMarketTestRates)\n            .filter(([market, rate]: any) => rate > 0)\n            .map(([market, rate]) => market);\n\n        const qqqTradeMarkets =\n            qqqMarkets.length > 3 ? qqqMarkets.slice(0, 3) : qqqMarkets;\n\n        return { tradeMarkets, qqqTradeMarkets };\n    }\n\n    private getTradeData(tradeMarkets: string[], index: number) {\n        const tradeIndex = 30 + index;\n\n        const marketNames = this.data.map((aMarketData) => aMarketData.market);\n        const tradeData = tradeMarkets.map((market: string) => {\n            const index = marketNames.indexOf(market);\n            const candles = this.data[index].candles;\n            return {\n                market,\n                candles: [candles[tradeIndex - 1], candles[tradeIndex]],\n            };\n        });\n\n        const newTradeData: any = {};\n        tradeMarkets.forEach((market) => {\n            newTradeData[market] = [\n                this.qqqData[market][tradeIndex - 1],\n                this.qqqData[market][tradeIndex],\n            ];\n        });\n\n        return { tradeData, newTradeData };\n    }\n\n    private setTradeData(\n        tradeData: IMarketCandles,\n        index: number,\n        date: string\n    ) {\n        let tradeMarkets: ITradeMarket = {};\n\n        const prevTrades = index > 0 && this.tradeData[index - 1].tradeMarkets;\n        const prevMarkets = Object.keys(prevTrades);\n\n        if (index === 0) {\n            for (const market in tradeData) {\n                tradeMarkets[market] = {\n                    action: \"Buy\",\n                };\n            }\n        } else {\n            for (const market in tradeData) {\n                tradeMarkets[market] = {\n                    action: prevMarkets.includes(market) ? \"Hold\" : \"Buy\",\n                };\n            }\n        }\n\n        const markets = Object.keys(tradeData);\n        const sellMarkets = prevMarkets.filter(\n            (prevMarket) => !markets.includes(prevMarket)\n        );\n\n        const result = {\n            date,\n            tradeMarkets,\n            sellMarkets,\n        };\n\n        return result;\n    }\n\n    private getTradeProfits(\n        tradeData: IBackTestData3[], //array\n        newTradeData: any, // object\n        index: number,\n        formedTradeData: any\n    ) {\n        //  todo - formedTradeData clonedeep\n        // set buy_price\n        for (const market in formedTradeData.tradeMarkets) {\n            let buyPrice = 0;\n            const action = formedTradeData.tradeMarkets[market].action;\n\n            const candles = newTradeData[market];\n\n            switch (action) {\n                case \"Buy\":\n                    buyPrice = candles[1].trade_price;\n                    break;\n                case \"Hold\":\n                    buyPrice =\n                        this.tradeData[index - 1].tradeMarkets[market]\n                            .buy_price;\n\n                    break;\n            }\n\n            formedTradeData.tradeMarkets[market] = {\n                ...formedTradeData.tradeMarkets[market],\n                buy_price: buyPrice,\n            };\n        }\n\n        // new Profits\n        const tradeProfits = Object.entries(newTradeData).map(\n            ([market, candles]: [string, any]) => {\n                const marketTradeData = formedTradeData.tradeMarkets[market];\n                switch (marketTradeData.action) {\n                    case \"Hold\":\n                        const distance =\n                            candles[1].trade_price - marketTradeData.buy_price;\n                        const rate = distance / marketTradeData.buy_price;\n                        const gain = this.investmentPrice * rate;\n\n                        return {\n                            market,\n                            rate: rate,\n                            gain: gain,\n                        };\n                    default: // \"Buy\";\n                        return {\n                            market,\n                            rate: 0,\n                            gain: 0,\n                        };\n                }\n            }\n        );\n\n        // sell Market Profits\n        const selledProfits =\n            formedTradeData.sellMarkets &&\n            formedTradeData.sellMarkets.map((market: string) => {\n                const tradeIndex = 30 + index;\n                const buyPrice =\n                    this.tradeData[index - 1].tradeMarkets[market].buy_price;\n                const aData = this.qqqData[market][30 + index];\n                const rate = (aData.trade_price - buyPrice) / buyPrice;\n                const gain = this.investmentPrice * rate;\n\n                return {\n                    market,\n                    rate,\n                    gain,\n                };\n            });\n\n        const sumGain = selledProfits.reduce((acc: number, value: any) => {\n            return acc + value.gain;\n        }, 0);\n\n        const SumUnrealizeGain = [...tradeProfits].reduce(\n            (acc: number, value: any) => {\n                return acc + value.gain;\n            },\n            0\n        );\n\n        this.totalGain += sumGain;\n\n        this.totalUnrealizeGain = this.totalGain + SumUnrealizeGain;\n\n        return {\n            tradeProfits,\n            selledProfits,\n            sumGain,\n            SumUnrealizeGain,\n        };\n    }\n\n    private render(\n        index: number,\n        tradeDate: string,\n        tradeProfits: ITradeProfits[],\n        selledProfits: any,\n        sumGain: number,\n        SumUnrealizeGain: number\n    ) {\n        const cloned = cloneTemplate(this.template);\n\n        const buyContainer = this.renderBuySell(tradeProfits);\n        const sellContainer = this.renderBuySell(selledProfits);\n\n        cloned.querySelector(\".tradeMarkets\")?.appendChild(buyContainer);\n        cloned.querySelector(\".sellMarkets\")?.appendChild(sellContainer);\n\n        const data = {\n            index,\n            date: tradeDate,\n            SumUnrealizeGain: Math.round(SumUnrealizeGain).toLocaleString(),\n            sumGain: Math.round(sumGain).toLocaleString(),\n            totalGain: Math.round(this.totalGain).toLocaleString(),\n            totalUnrealizeGain: Math.round(\n                this.totalUnrealizeGain\n            ).toLocaleString(),\n        };\n        updateElementsTextWithData(data, cloned);\n\n        const container = this.querySelector(\"tbody\") as HTMLElement;\n        container.appendChild(cloned);\n    }\n\n    private renderBuySell(data: any[]) {\n        const tradeTp = document.querySelector(\n            \"#tp-trade\"\n        ) as HTMLTemplateElement;\n        const container = document.createElement(\"ul\") as HTMLUListElement;\n        data.map(({ market, rate, gain }) => {\n            const tradeData = {\n                market,\n                rate: (rate * 100).toFixed(2),\n                gain: Math.round(gain).toLocaleString(),\n            };\n            const clonedTrade = cloneTemplate(tradeTp);\n            updateElementsTextWithData(tradeData, clonedTrade);\n            return clonedTrade;\n        }).forEach((cloned) => container.appendChild(cloned));\n        return container;\n    }\n\n    private renderSummary() {\n        const priceElement = this.querySelector(\n            \".summaryAllPrice\"\n        ) as HTMLElement;\n        const rateElement = this.querySelector(\n            \".summaryAllRate\"\n        ) as HTMLElement;\n        const marketsElement = this.querySelector(\".markets\") as HTMLElement;\n        const countElement = this.querySelector(\".count\") as HTMLElement;\n\n        const sumRate =\n            ((this.totalUnrealizeGain - this.investmentPrice * 3) /\n                this.investmentPrice) *\n            100;\n\n        priceElement.textContent = Math.round(\n            this.totalUnrealizeGain - this.investmentPrice * 3\n        ).toLocaleString();\n        rateElement.textContent = Math.round(sumRate).toLocaleString();\n        marketsElement.textContent = this.markets.join(\" | \");\n        countElement.textContent = this.count.toString();\n    }\n}\n", "import AppBacktest3 from \"./AppBacktest3\";\n\ncustomElements.define(\"app-backtest2\", AppBacktest3);\n"],
  "mappings": "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",
  "names": ["index"]
}

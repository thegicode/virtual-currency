{
  "version": 3,
  "sources": ["../../../app/scripts/utils/helpers.ts", "../../../app/scripts/pages/backtest4/AppBacktest4.ts", "../../../app/scripts/pages/backtest4/index.ts"],
  "sourcesContent": ["export function cloneTemplate<T extends HTMLElement>(\n    template: HTMLTemplateElement\n) {\n    const content = template.content.firstElementChild;\n    if (!content) {\n        throw new Error(\"Template content is empty\");\n    }\n    return content.cloneNode(true) as T;\n}\n\nexport function updateElementsTextWithData<T>(data: T, container: HTMLElement) {\n    Object.entries(data as Record<string, unknown>).forEach(([key, value]) => {\n        const element = container.querySelector(`.${key}`) as HTMLElement;\n        // console.log(key, value, element);\n        element.textContent = String(value);\n    });\n}\n\nexport function roundToDecimalPlace(amount: number, point: number) {\n    const decimalPoint = Math.pow(10, point);\n    return Math.round(amount * decimalPoint) / decimalPoint;\n}\n", "/**\n * \uD22C\uC790\uC804\uB7B5 4 : \uB2E4\uC790 \uAC00\uC0C1\uD654\uD3D0 + \uC804\uC77C \uC624\uD6C4 \uC0C1\uC2B9 \uC2DC \uC624\uC804 \uD22C\uC790 + \uBCC0\uB3D9\uC131 \uC870\uC808\n * \uD22C\uC790\uB300\uC0C1 : \uC544\uBB34 \uAC00\uC0C1\uD654\uD3D0 \uBA87 \uAC1C \uC120\uD0DD\n * \uAC70\uB798\uBE44\uC6A9  : 0.1% \uC801\uC6A9\n *             - \uC9C0\uC815\uAC00 \uB9E4\uC218\uAC00 \uC591\uD638\uD55C \uC804\uB7B5\uC774\uB77C \uAC70\uB798 \uBE44\uC6A9\uC774 \uC0C1\uB300\uC801\uC73C\uB85C \uC801\uAC8C \uBC1C\uC0DD\n * \uD22C\uC790\uC804\uB7B5 :\n *      - \uC624\uC804 0\uC2DC\uC5D0 \uAC00\uC0C1\uD654\uD3D0\uC758 \uC804\uC77C \uC624\uD6C4(12\uC2DC ~ 24\uC2DC) \uC218\uC775\uB960\uACFC \uAC70\uB798\uB7C9 \uCCB4\uD06C\n *      - \uB9E4\uC218: \uC804\uC77C \uC624\uD6C4 \uC218\uC775\uB960 > 0, \uC804\uC77C \uC624\uD6C4 \uAC70\uB798\uB7C9 > \uC624\uC804 \uAC70\uB798\uB7C9\n *      - \uC790\uAE08 \uAD00\uB9AC : \uAC00\uC0C1\uD654\uD3D0\uBCC4 \uD22C\uC785 \uAE08\uC561\uC740 (\uD0C0\uAE43 \uBCC0\uB3D9\uC131 / \uD2B9\uC815 \uD654\uD3D0\uC758 \uC804\uC77C \uC624\uD6C4 \uBCC0\uB3D9\uC131) / \uD22C\uC790\uB300\uC0C1 \uD654\uD3D0\uC218\n *      - \uB9E4\uB3C4 : \uC815\uC624\n *\n * \uC7AC\uB8CC : \uC804\uC77C \uC624\uD6C4 (12\uC2DC ~ 24\uC2DC) \uC218\uC775\uB960\uACFC\n *       \uC804\uC77C \uC624\uC804 & \uC624\uD6C4 \uAC70\uB798\uB7C9\n */\n\nimport { setMovingAverage } from \"@app/scripts/components/backtest/movingAverage\";\nimport {\n    getDaliyVolatility,\n    getVolatility,\n} from \"@app/scripts/components/backtest/volatility\";\nimport {\n    cloneTemplate,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\n\nexport default class AppBacktest4 extends HTMLElement {\n    private data: ICandlesMinutes[];\n    private tradeData: any[];\n    private market: string;\n    private size: number;\n    private totalInvestmentPrice: number;\n    private marketSize: number;\n    private investmentPrice: number;\n    private sumProfit: number;\n    private summaryAllPrice: number;\n    private allSumSize: number;\n    private target: number;\n    private sizeElement: HTMLInputElement;\n    private tableElement: HTMLElement;\n    private itemTempleteElement: HTMLTemplateElement;\n    private selectElement: HTMLSelectElement;\n    private formElement: HTMLFormElement;\n\n    constructor() {\n        super();\n\n        this.data = [];\n        this.tradeData = [];\n        this.market = \"KRW-BTC\";\n        this.size = 60;\n        this.marketSize = 5;\n        this.totalInvestmentPrice = 1000000;\n        this.investmentPrice = this.totalInvestmentPrice / this.marketSize;\n        this.sumProfit = 0;\n        this.summaryAllPrice = 0;\n        this.allSumSize = 0;\n        this.target = 2; // \uCD94\uCC9C 2\n\n        this.sizeElement = this.querySelector(\n            \"input[name=count]\"\n        ) as HTMLInputElement;\n        this.tableElement = this.querySelector(\"tbody\") as HTMLElement;\n        this.itemTempleteElement = document.querySelector(\n            \"#tp-item\"\n        ) as HTMLTemplateElement;\n\n        this.selectElement = this.querySelector(\"select\") as HTMLSelectElement;\n        this.formElement = this.querySelector(\"form\") as HTMLFormElement;\n\n        this.onChangeMarket = this.onChangeMarket.bind(this);\n        this.onOptionSubmit = this.onOptionSubmit.bind(this);\n    }\n\n    connectedCallback() {\n        this.initialize();\n\n        this.runBackTest();\n\n        this.selectElement.addEventListener(\"change\", this.onChangeMarket);\n        this.formElement.addEventListener(\"submit\", this.onOptionSubmit);\n    }\n\n    disconnectedCallback() {\n        this.selectElement.removeEventListener(\"change\", this.onChangeMarket);\n        this.formElement.removeEventListener(\"submit\", this.onOptionSubmit);\n    }\n\n    private initialize() {\n        this.sizeElement.value = this.size.toString();\n        (this.querySelector(\".investmentPrice\") as HTMLElement).textContent =\n            this.investmentPrice.toLocaleString();\n    }\n\n    async runBackTest() {\n        this.data = [];\n        this.tradeData = [];\n\n        for (let index = 0; index < this.size; index++) {\n            console.log(index);\n\n            try {\n                const toDate = `${this.getToDate(index)}+09:00`;\n                const fetchedData = await this.fetchData(\"60\", \"37\", toDate);\n\n                this.data.push(fetchedData);\n\n                const makedData = this.makeTradeData(fetchedData);\n\n                const actionedData = this.setTradingAction(makedData, index);\n\n                const volatedData = this.setVolatility(actionedData);\n\n                const orderedData = this.order(volatedData);\n\n                const profitedData = this.setProfit(orderedData, index);\n\n                this.tradeData.push(profitedData);\n\n                await this.delay(90);\n            } catch (error: any) {\n                console.error(\n                    `Failed to process index ${index}:`,\n                    error.message\n                );\n            }\n        }\n        // console.log(this.tradeData);\n\n        this.render();\n        this.renderSummary();\n        this.renderAllSum();\n    }\n\n    private delay(duration: number) {\n        return new Promise((resolve) => setTimeout(resolve, duration));\n    }\n\n    private async fetchData(unit: string, count: string, to: string) {\n        const searchParams = new URLSearchParams({\n            market: this.market,\n            count,\n            unit,\n            to,\n            // to: \"2024-04-28T01:00:00+09:00\",\n        });\n\n        const response = await fetch(`/fetchCandlesMinutes?${searchParams}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private getToDate(index: number) {\n        const now = new Date();\n        now.setMonth(now.getMonth());\n        now.setDate(now.getDate() - this.size + index);\n        now.setHours(22, 0, 0, 0);\n        return now.toISOString().slice(0, 19);\n    }\n\n    private makeTradeData(data: ICandlesMinutes[]) {\n        const lastData = data[24];\n        const date = lastData.candle_date_time_kst.slice(0, 10);\n\n        const prevDayData = {\n            morning: [data[0], data[12]],\n            afternoon: [data[12], lastData],\n        };\n\n        // \uC624\uD6C4 \uC218\uC775\uB960\n        const startPrice = prevDayData.afternoon[0].trade_price;\n        const afternoonRate =\n            (prevDayData.afternoon[1].trade_price - startPrice) / startPrice;\n\n        // \uC804\uC77C \uC624\uC804 \uAC70\uB798\uB7C9\n        const moringVolume =\n            prevDayData.morning[1].candle_acc_trade_volume -\n            prevDayData.morning[0].candle_acc_trade_volume;\n\n        // \uC804\uC77C \uC624\uD6C4 \uAC70\uB798\uB7C9\n        const afterVolume =\n            prevDayData.afternoon[1].candle_acc_trade_volume -\n            prevDayData.afternoon[0].candle_acc_trade_volume;\n\n        const condition = afternoonRate > 0 && afterVolume > moringVolume;\n\n        const afternoonData = this.getAfternoonData(data.slice(12));\n\n        return {\n            date,\n            condition,\n            afternoonData,\n            trade_price: lastData.trade_price,\n            trade_sell_date: data[data.length - 1],\n        };\n    }\n\n    getAfternoonData(data: ICandlesMinutes[]) {\n        const highPrices = data.map((d) => d.high_price);\n        const lowPrices = data.map((d) => d.low_price);\n\n        return {\n            high_price: Math.max(...highPrices),\n            low_price: Math.min(...lowPrices),\n            opening_price: data[0].opening_price,\n        };\n    }\n\n    private setTradingAction(aData: ITradeData4, index: number) {\n        let action = \"\";\n        if (index === 0) {\n            action = aData.condition ? \"Buy\" : \"Reserve\";\n        } else {\n            if (this.tradeData[index - 1].condition === aData.condition) {\n                action = aData.condition ? \"Hold\" : \"Reserve\";\n            } else {\n                action = aData.condition ? \"Buy\" : \"Sell\";\n            }\n        }\n\n        return {\n            ...JSON.parse(JSON.stringify(aData)),\n            action,\n        };\n    }\n\n    private setVolatility(data: ITradeData4) {\n        // \uD2B9\uC815 \uD654\uD3D0\uC758 \uC804\uC77C \uC624\uD6C4 \uBCC0\uB3D9\uC131\n        const afternoonData = data.afternoonData;\n        const volatility =\n            ((afternoonData.high_price - afternoonData.low_price) /\n                afternoonData.opening_price) *\n            100;\n\n        return {\n            ...JSON.parse(JSON.stringify(data)),\n            volatility,\n        };\n    }\n\n    private order(data: ITradeData4) {\n        const parseData = JSON.parse(JSON.stringify(data));\n\n        if (!data.volatility) return parseData;\n\n        if (data.action === \"Buy\") {\n            const percent = (this.target / data.volatility) * 100;\n            const unitPercent = percent / this.marketSize;\n            const orderAmount = (this.totalInvestmentPrice * unitPercent) / 100;\n            return {\n                ...parseData,\n                order_amount: Math.round(orderAmount),\n            };\n        }\n\n        return parseData;\n    }\n\n    private setProfit(data: ITradeData4, index: number) {\n        const aData = JSON.parse(JSON.stringify(data));\n        const prevTradeData = index > 0 && this.tradeData[index - 1];\n        const buyData = index > 0 && this.tradeData[prevTradeData.buy_index];\n\n        switch (aData.action) {\n            case \"Buy\":\n                return {\n                    ...aData,\n                    buy_index: index,\n                    sumProfit: prevTradeData.sumProfit || 0,\n                    unrealize_sum: prevTradeData.unrealize_sum || 0,\n                };\n            case \"Hold\":\n                const unrealize_rate =\n                    (aData.trade_price - buyData.trade_price) /\n                    buyData.trade_price;\n                const unrealize_profit = unrealize_rate * buyData.order_amount;\n\n                return {\n                    ...aData,\n                    buy_index: prevTradeData.buy_index,\n                    sumProfit: prevTradeData.sumProfit || 0,\n                    unrealize_rate,\n                    unrealize_profit,\n                    unrealize_sum:\n                        prevTradeData.unrealize_sum + unrealize_profit,\n                };\n            case \"Sell\":\n                const rate =\n                    (aData.trade_sell_date.trade_price - buyData.trade_price) /\n                    buyData.trade_price;\n                const profit = rate * buyData.order_amount;\n                const sumProfit = prevTradeData.sumProfit + profit;\n                return {\n                    ...aData,\n                    rate,\n                    profit,\n                    sumProfit: sumProfit,\n                    unrealize_sum: sumProfit,\n                };\n\n            case \"Reserve\": {\n                return {\n                    ...aData,\n                    sumProfit: prevTradeData.sumProfit || 0,\n                    unrealize_sum: prevTradeData.unrealize_sum || 0,\n                };\n            }\n        }\n    }\n\n    private render() {\n        this.tableElement.innerHTML = \"\";\n        const fragment = new DocumentFragment();\n\n        this.tradeData\n            .map((aData: ITradeData4, index) => this.createItem(aData, index))\n            .forEach((cloned: HTMLElement) => fragment.appendChild(cloned));\n\n        this.tableElement.appendChild(fragment);\n    }\n\n    private createItem(aData: ITradeData4, index: number) {\n        const cloned = cloneTemplate<HTMLElement>(this.itemTempleteElement);\n\n        const parseData = {\n            index,\n            date: aData.date,\n            condition: aData.condition.toString(),\n            action: aData.action,\n            volatility: aData.volatility?.toFixed(2),\n            order_amount: aData.order_amount?.toLocaleString() || \"\",\n            rate: (aData.rate && aData.rate * 100)?.toFixed(2) || \"\",\n            profit:\n                (aData.profit && Math.round(aData.profit).toLocaleString()) ||\n                \"\",\n            sumProfit:\n                aData.sumProfit && Math.round(aData.sumProfit).toLocaleString(),\n            unrealize_rate:\n                (aData.unrealize_rate &&\n                    (aData.unrealize_rate * 100).toFixed(2)) ||\n                \"\",\n            unrealize_profit:\n                (aData.unrealize_profit &&\n                    Math.round(aData.unrealize_profit).toLocaleString()) ||\n                \"\",\n            unrealize_sum:\n                aData.unrealize_sum &&\n                Math.round(aData.unrealize_sum).toLocaleString(),\n        };\n\n        updateElementsTextWithData(parseData, cloned);\n\n        cloned.dataset.action = aData.action;\n\n        return cloned;\n    }\n\n    private renderSummary() {\n        // if (this.data.length === 0) return;\n        // const tpElement = document.querySelector(\n        //     \"#tp-summary\"\n        // ) as HTMLTemplateElement;\n        // const summaryListElement = this.querySelector(\n        //     \".summary-list\"\n        // ) as HTMLElement;\n        // const cloned = cloneTemplate<HTMLElement>(tpElement);\n        // const deleteButton = cloned.querySelector(\n        //     \".deleteButton\"\n        // ) as HTMLButtonElement;\n        // const lastProfit = this.data[this.data.length - 1].sumProfit;\n        // if (lastProfit === undefined) return;\n        // const totalRate = (lastProfit / this.investmentPrice) * 100;\n        // const summaryData = {\n        //     market: this.market,\n        //     period: this.count,\n        //     totalRate: `${totalRate.toFixed(2)} %`,\n        //     lastProfit: ` ${Math.round(lastProfit).toLocaleString()} \uC6D0`,\n        // };\n        // updateElementsTextWithData(summaryData, cloned);\n        // summaryListElement.appendChild(cloned);\n        // // summary-all\n        // this.summaryAllPrice += lastProfit;\n        // this.allSumSize++;\n        // this.renderAllSum();\n        // // delete\n        // deleteButton.addEventListener(\"click\", () => {\n        //     cloned.remove();\n        //     this.summaryAllPrice -= lastProfit;\n        //     this.allSumSize--;\n        //     this.renderAllSum();\n        // });\n    }\n\n    private renderAllSum() {\n        const summaryAllElement = this.querySelector(\n            \".summary-all\"\n        ) as HTMLElement;\n\n        const unrealizeSum =\n            this.tradeData[this.tradeData.length - 1].unrealize_sum;\n\n        const summaryAllRate = (unrealizeSum / this.investmentPrice) * 100;\n\n        const allSumData = {\n            summaryAllPrice: Math.round(unrealizeSum).toLocaleString(),\n            summaryAllRate: summaryAllRate.toFixed(2).toLocaleString(),\n        };\n        updateElementsTextWithData(allSumData, summaryAllElement);\n    }\n\n    private onChangeMarket(event: Event) {\n        const target = event.target as HTMLInputElement;\n        this.market = target.value;\n        this.runBackTest();\n    }\n\n    private onOptionSubmit(event: Event) {\n        event?.preventDefault();\n        const maxSize = Number(this.sizeElement.getAttribute(\"max\"));\n        this.size =\n            Number(this.sizeElement.value) > maxSize\n                ? maxSize\n                : Number(this.sizeElement.value);\n        this.sizeElement.value = this.size.toString();\n        this.runBackTest();\n    }\n}\n", "import AppBacktest4 from \"./AppBacktest4\";\n\ncustomElements.define(\"app-backtest4\", AppBacktest4);\n"],
  "mappings": "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",
  "names": []
}

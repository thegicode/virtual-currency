{
  "version": 3,
  "sources": ["../../../app/scripts/components/backtest/movingAverage.ts", "../../../app/scripts/components/backtest/volatility.ts", "../../../app/scripts/pages/backtest6/AppBacktest6.ts", "../../../app/scripts/utils/helpers.ts", "../../../app/scripts/pages/backtest6/Overview.ts", "../../../app/scripts/pages/backtest6/Control.ts", "../../../app/scripts/pages/backtest6/Table.ts", "../../../app/scripts/pages/backtest6/index.ts"],
  "sourcesContent": ["function setMovingAverage(data: any[], period = 5) {\n    const result = data.map((aData, index) => {\n        if (index < period - 1) {\n            return aData;\n        }\n\n        const average = calculateMovingAverage(data, index, period);\n\n        return {\n            ...aData,\n            [`moving_average_${period}`]: average,\n        };\n    });\n\n    return result;\n}\n\nfunction calculateMovingAverage(data: any, index: number, period = 5) {\n    let sum = 0;\n\n    for (let i = 0; i < period; i++) {\n        sum += data[index - i].trade_price;\n    }\n\n    return sum / period;\n}\n\nfunction applyStandardMovingAverages<T>(data: T[]) {\n    let result = setMovingAverage(data, 3);\n    result = setMovingAverage(result, 5);\n    result = setMovingAverage(result, 10);\n    result = setMovingAverage(result, 20);\n    return result;\n}\n\nfunction setVolumeAverage(data: ICandles9[], period = 5) {\n    const result = data.map((aData, index) => {\n        if (index < period - 1) {\n            return aData;\n        }\n\n        const average = calculateVolumeAverage(data, index, period);\n\n        return {\n            ...aData,\n            [`volume_average_${period}`]: average,\n        };\n    });\n\n    return result;\n}\n\nfunction calculateVolumeAverage(data: ICandles9[], index: number, period = 5) {\n    let sum = 0;\n\n    for (let i = 0; i < period; i++) {\n        sum += data[index - i].candle_acc_trade_volume;\n    }\n\n    return sum / period;\n}\n\nexport { setMovingAverage, applyStandardMovingAverages, setVolumeAverage };\n", "// \uBCC0\uB3D9\uC131 \uAD6C\uD558\uAE30\n\nfunction getDaliyVolatility(aData: any) {\n    const result =\n        ((aData.high_price - aData.low_price) / aData.opening_price) * 100;\n\n    return Number(result.toFixed(2));\n}\n\nfunction getVolatility(dataList: any, index: number) {\n    if (index < 5) {\n        return;\n    }\n\n    let sum = 0;\n\n    // for (let i = 5; i > 0; i--) {\n    //     sum += dataList[index - i].daily_volatility;\n    // }\n\n    for (let i = index - 5; i < index; i++) {\n        sum += dataList[i].daily_volatility;\n    }\n\n    return Number((sum / 5).toFixed(2));\n}\n\n// 5, 6, 7\n// to Name :  calculateBreakoutThreshold\nfunction volatilityBreakout(\n    prevCandle: {\n        high_price: number;\n        low_price: number;\n        opening_price: number;\n    },\n    realPrice: number,\n    openingPrice: number,\n    k: number\n) {\n    // 1. \uC804\uB0A0 \uD558\uB8E8\uB9CC\uC5D0 \uC6C0\uC9C1\uC778 \uCD5C\uB300\uD3ED\n    const range = prevCandle.high_price - prevCandle.low_price;\n\n    //  2. \uB3CC\uD30C \uAC00\uACA9 : \uB2F9\uC77C \uC2DC\uAC00 + (\uB808\uC778\uC9C0 * k)\n    const standardPrice = openingPrice + range * k;\n\n    // 3. \uB9E4\uC218 \uAE30\uC900 : \uC2E4\uC2DC\uAC04 \uAC00\uACA9 > \uB2F9\uC77C \uC2DC\uAC00 + (\uB808\uC778\uC9C0 * k)\n    const isBreakout = realPrice > standardPrice;\n\n    // 4. \uC804\uC77C \uBCC0\uB3D9\uC131\n    const prevVolatilityRate = (range / prevCandle.opening_price) * 100;\n\n    return {\n        range,\n        standardPrice,\n        buyCondition: isBreakout, // to delete\n        isBreakout,\n        prevVolatilityRate,\n    };\n}\n\nexport { getDaliyVolatility, getVolatility, volatilityBreakout };\n", "/**\n * \uD22C\uC790\uC804\uB7B5 6 : \uB2E4\uC790 \uAC00\uC0C1\uD654\uD3D0 + \uC0C1\uC2B9\uC7A5 + \uBCC0\uB3D9\uC131 \uB3CC\uD30C\n * \uD22C\uC790\uB300\uC0C1 : \uC544\uBB34 \uAC00\uC0C1\uD654\uD3D0 \uBA87 \uAC1C \uC120\uD0DD\n * \uAC70\uB798\uBE44\uC6A9  : 0.2% \uC801\uC6A9\n * \uD22C\uC790\uC804\uB7B5 :\n *      - \uAC01 \uD654\uD3D0\uC758 \uB808\uC778\uC9C0 \uACC4\uC0B0 (\uC804\uC77C \uACE0\uAC00 - \uC800\uAC00)\n *      - \uAC01 \uD654\uD3D0\uC758 \uAC00\uACA9\uC774 5\uC77C \uC774\uB3D9 \uD3C9\uADE0\uBCF4\uB2E4 \uB192\uC740\uC9C0 \uC5EC\uBD80 \uD30C\uC545\n *          - \uB0AE\uC744 \uACBD\uC6B0 \uD22C\uC790 \uB300\uC0C1\uC5D0\uC11C \uC81C\uC678\n *      - \uB9E4\uC218 : \uC2E4\uC2DC\uAC04 \uAC00\uACA9 > \uB2F9\uC77C \uC2DC\uAC00 + (\uB808\uC778\uC9C0 * k)\n *          - \uD544\uC790\uB4E4\uC740 k=0.5 \uCD94\uCC9C\n *      - \uB3CC\uD30C\uC5D0 \uC131\uACF5\uD55C \uAC00\uC0C1\uD654\uD3D0\uC5D0 \uC790\uC0B0\uC758 n\uBD84\uC758 1 \uD22C\uC785\n *          - \uC774 \uC804\uB7B5\uC5D0 2\uAC1C \uD654\uD3D0\uB97C \uD22C\uC785\uD55C\uB2E4\uBA74 \uC790\uC0B0\uC758 2\uBD84\uC758 1 \uD22C\uC785\n * \uB9E4\uB3C4 : \uB2E4\uC74C\uB0A0 \uC2DC\uAC00\n *\n * \uC5EC\uAE30\uC11C\uB294 \uB0A0\uC9DC \uAE30\uC900\uC774 \uC544\uB2CC \uCF54\uC778 \uBCC4\uB85C \uC801\uC6A9\n */\n\nimport { setMovingAverage } from \"@app/scripts/components/backtest/movingAverage\";\nimport { volatilityBreakout } from \"@app/scripts/components/backtest/volatility\";\nimport Control from \"./Control\";\nimport Overview from \"./Overview\";\nimport Table from \"./Table\";\n\nexport default class AppBacktest6 extends HTMLElement {\n    public markets: string[];\n    public count: number;\n    public totalInvestmentAmount: number;\n    public investmentAmount: number;\n    public k: number;\n\n    private overviewCustomElement: Overview;\n    private controlCustomElement: Control;\n    private tableCustomElement: Table;\n\n    constructor() {\n        super();\n\n        this.markets = [\"KRW-BTC\", \"KRW-ETH\", \"KRW-DOGE\", \"KRW-SBD\", \"KRW-XRP\"];\n        this.count = 30;\n        this.totalInvestmentAmount = 1000000;\n        this.investmentAmount =\n            this.totalInvestmentAmount / this.markets.length;\n        this.k = 0.5; // \uCD94\uCC9C 0.5\n\n        this.overviewCustomElement = this.querySelector(\n            \"backtest-overview\"\n        ) as Overview;\n        this.controlCustomElement = this.querySelector(\n            \"backtest-control\"\n        ) as Control;\n        this.tableCustomElement = this.querySelector(\"backtest-table\") as Table;\n    }\n\n    async connectedCallback() {\n        // \uAC01 \uD654\uD3D0\uC758 \uAC00\uACA9\uC774 5\uC77C \uC774\uB3D9 \uD3C9\uADE0\uBCF4\uB2E4 \uB192\uC740 \uCF54\uC778\n        // const markets = await this.checkMovingAverage();\n        // if (markets.length === 0) return;\n        this.runBackTest();\n    }\n\n    // private async checkMovingAverage() {\n    //     let obj: any = {};\n\n    //     const promises = this.markets.map(async (aMarket) => {\n    //         // market \uBCC4\uB85C \uD604\uC7AC \uAE30\uC900 5\uAC1C\uC758 \uB370\uC774\uD130 \uBC1B\uC544\uC624\uAE30\n    //         const data = await this.fetchData(aMarket, \"5\");\n\n    //         // \uAC01 \uD654\uD3D0\uC758 \uAC00\uACA9\uC774 5\uC77C \uC774\uB3D9 \uD3C9\uADE0\uBCF4\uB2E4 \uB192\uC740\uC9C0 \uC5EC\uBD80 \uD30C\uC545\n    //         const avergaeData = setMovingAverage(data);\n    //         const isOver = avergaeData\n    //             .slice(4)\n    //             .map((aData) => aData.trade_price > aData.moving_average_5)[0];\n    //         obj[aMarket] = isOver;\n    //     });\n    //     await Promise.all(promises);\n\n    //     return Object.keys(obj).filter((key) => obj[key] === true);\n    // }\n\n    public async runBackTest() {\n        for (const market of this.markets) {\n            console.log(market);\n\n            try {\n                const data = await this.fetchData(\n                    market,\n                    (this.count + 4).toString()\n                );\n\n                const realprices = await this.getRealPrices(data);\n\n                const result = this.backtest(data, realprices);\n\n                this.render(result, this.markets.indexOf(market));\n            } catch (error) {\n                console.error(\"Error in runBackTest:\", error);\n                // \uC5D0\uB7EC \uCC98\uB9AC \uB85C\uC9C1 \uCD94\uAC00 (\uC608: \uC5D0\uB7EC \uBC1C\uC0DD\uC2DC \uC7AC\uC2DC\uB3C4 \uB610\uB294 \uB85C\uADF8 \uC800\uC7A5 \uB4F1)\n            }\n        }\n    }\n\n    private backtest(fetchedData: ICandles5[], orginRealPrices: IRealPrice[]) {\n        const realPrices = orginRealPrices.slice(4);\n        const avereagedData = setMovingAverage(fetchedData);\n        const strategedData = this.strategy(avereagedData, realPrices);\n        const calculatedData = this.calculateProfits(strategedData);\n        return calculatedData;\n    }\n\n    private strategy(fetchedData: ICandles5[], realPrices: IRealPrice[]) {\n        const result = fetchedData\n            .slice(4)\n            .map((aData: ICandles5, index: number) => {\n                // 5\uC77C \uC774\uB3D9 \uD3C9\uADE0\uC120\uBCF4\uB2E4 \uB192\uC740\uC9C0\n                const isAverageOver = aData.moving_average_5\n                    ? aData.trade_price > aData.moving_average_5\n                    : null;\n\n                // \uC2E4\uC2DC\uAC04 \uAC00\uACA9 > \uB2F9\uC77C \uC2DC\uAC00 + (\uB808\uC778\uC9C0 * k)\n                const prevData = fetchedData[index + 3];\n                const realPrice = realPrices[index].price;\n\n                const { range, standardPrice, buyCondition } =\n                    volatilityBreakout(\n                        prevData,\n                        realPrice,\n                        aData.opening_price,\n                        this.k\n                    );\n\n                return {\n                    market: aData.market,\n                    date: aData.candle_date_time_kst,\n                    range,\n                    standardPrice,\n                    buyCondition: Boolean(isAverageOver && buyCondition),\n                    action: isAverageOver && buyCondition ? \"Trade\" : \"Reserve\",\n                    buyPrice: realPrice,\n                    sellPrice: aData.trade_price,\n                };\n            });\n\n        return result;\n    }\n\n    private calculateProfits(data: IBacktest5[]) {\n        let sumProfit = 0;\n\n        const result = data.map((aData) => {\n            switch (aData.action) {\n                case \"Trade\":\n                    const rate =\n                        aData.sellPrice && aData.buyPrice\n                            ? (aData.sellPrice - aData.buyPrice) /\n                              aData.buyPrice\n                            : 0;\n                    const profit = rate * this.investmentAmount;\n                    sumProfit += profit;\n\n                    return {\n                        ...aData,\n                        rate,\n                        profit,\n                        sumProfit,\n                    };\n\n                default:\n                    return {\n                        ...aData,\n                        buyPrice: null,\n                        sellPrice: null,\n                        sumProfit,\n                    };\n            }\n        });\n        return result;\n    }\n\n    private async getRealPrices(data: ICandles5[]) {\n        const realprices = [];\n        for (const aData of data) {\n            const date = aData.candle_date_time_kst;\n            const toDate = date.replace(\"T09:00:00\", \"T13:00:00+09:00\");\n            const response = await this.fetchMinutes(\n                aData.market,\n                \"60\",\n                \"1\",\n                toDate\n            );\n            const price = response[0].opening_price;\n\n            realprices.push({\n                date,\n                price,\n            });\n\n            await this.delay(100);\n        }\n        return realprices;\n    }\n\n    private async fetchData(market: string, count: string) {\n        const searchParams = new URLSearchParams({\n            market: market,\n            count,\n        });\n\n        const response = await fetch(`/fetchCandles?${searchParams}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private async fetchMinutes(\n        market: string,\n        unit: string,\n        fetchCount: string,\n        to: string\n    ) {\n        const searchParams = new URLSearchParams({\n            market: market,\n            count: fetchCount,\n            unit,\n            to,\n            // to: \"2024-04-28T01:00:00+09:00\",\n        });\n\n        const response = await fetch(`/fetchCandlesMinutes?${searchParams}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private delay(duration: number) {\n        return new Promise((resolve) => setTimeout(resolve, duration));\n    }\n\n    private render(data: IBacktest5[], index: number) {\n        this.controlCustomElement.render();\n        this.overviewCustomElement.redner(data);\n        this.tableCustomElement.render(data, index);\n    }\n\n    public initialize() {\n        this.controlCustomElement.initialize();\n        this.overviewCustomElement.initialize();\n        this.tableCustomElement.initialize();\n    }\n}\n", "export function cloneTemplate<T extends HTMLElement>(\n    template: HTMLTemplateElement\n) {\n    const content = template.content.firstElementChild;\n    if (!content) {\n        throw new Error(\"Template content is empty\");\n    }\n    return content.cloneNode(true) as T;\n}\n\nexport function updateElementsTextWithData<T>(data: T, container: HTMLElement) {\n    Object.entries(data as Record<string, unknown>).forEach(([key, value]) => {\n        const element = container.querySelector(`.${key}`) as HTMLElement;\n        // console.log(key, value, element);\n        element.textContent = String(value);\n    });\n}\n\nexport function roundToDecimalPlace(amount: number, point: number) {\n    const decimalPoint = Math.pow(10, point);\n    return Math.round(amount * decimalPoint) / decimalPoint;\n}\n", "import {\n    cloneTemplate,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\nimport AppBacktest6 from \"./AppBacktest6\";\n\nexport default class Overview extends HTMLElement {\n    private app: AppBacktest6;\n\n    private data: IBacktest5[];\n    private profit: number;\n    private totalSumPrice: number;\n    private size: number;\n\n    private sumElement: HTMLElement;\n    private listElement: HTMLElement;\n\n    private itemTemplate: HTMLTemplateElement;\n\n    constructor() {\n        super();\n\n        this.app = document.querySelector(\"app-backtest5\") as AppBacktest6;\n\n        this.data = [];\n        this.profit = 0;\n        this.totalSumPrice = 0;\n        this.size = 0;\n\n        this.sumElement = this.querySelector(\".overview-sum\") as HTMLElement;\n        this.listElement = this.querySelector(\".overview-list\") as HTMLElement;\n        this.itemTemplate = document.querySelector(\n            \"#tp-overviewItem\"\n        ) as HTMLTemplateElement;\n    }\n\n    connectedCallback() {}\n\n    public initialize() {\n        this.data = [];\n        this.profit = 0;\n        this.totalSumPrice = 0;\n        this.size = 0;\n\n        this.listElement.innerHTML = \"\";\n\n        const renderData = {\n            totalSumPrice: 0,\n            totalSumRate: 0,\n        };\n\n        updateElementsTextWithData(renderData, this.sumElement);\n    }\n\n    public redner(data: IBacktest5[]) {\n        this.data = data;\n        this.renderList();\n        this.renderSum(true);\n    }\n\n    private renderList() {\n        const profit = this.data[this.data.length - 1].sumProfit || 0;\n        const rate = (profit / this.app.investmentAmount) * 100;\n        const market = this.data[0].market;\n\n        const renderData = {\n            market,\n            period: this.app.count,\n            totalRate: `${rate.toFixed(2)}%`,\n            totalProfit: ` ${Math.round(profit).toLocaleString()} \uC6D0`,\n        };\n\n        const cloned = cloneTemplate<HTMLElement>(this.itemTemplate);\n        cloned.dataset.value = profit.toString();\n        cloned.dataset.market = market;\n        updateElementsTextWithData(renderData, cloned);\n\n        this.listElement.appendChild(cloned);\n\n        this.addEvent(cloned);\n\n        this.profit = profit;\n    }\n\n    addEvent(cloned: HTMLElement) {\n        const deleteButton = cloned.querySelector(\n            \".deleteButton\"\n        ) as HTMLButtonElement;\n\n        deleteButton.addEventListener(\"click\", () => {\n            const profit = Number(cloned.dataset.value);\n            cloned.remove();\n            this.renderSum(false, profit);\n        });\n    }\n\n    private renderSum(isAdd: boolean, profit?: number) {\n        if (!this.app) return;\n\n        if (isAdd) {\n            this.totalSumPrice += this.profit;\n            this.size++;\n        } else {\n            if (profit === undefined) return;\n            this.totalSumPrice -= profit;\n            this.size--;\n        }\n\n        const totalSumRate =\n            this.totalSumPrice === 0\n                ? 0\n                : (this.totalSumPrice /\n                      (this.app.investmentAmount * this.size)) *\n                  100;\n\n        const renderData = {\n            totalSumPrice: Math.round(this.totalSumPrice).toLocaleString(),\n            totalSumRate: totalSumRate.toFixed(2).toLocaleString(),\n        };\n\n        updateElementsTextWithData(renderData, this.sumElement);\n    }\n}\n", "import AppBacktest6 from \"./AppBacktest6\";\n\nexport default class Control extends HTMLElement {\n    private app: AppBacktest6;\n\n    private formElement: HTMLFormElement;\n    private marketsInput: HTMLInputElement;\n    // private marketsButton: HTMLButtonElement;\n    private countInput: HTMLInputElement;\n    private investmentPriceElement: HTMLElement;\n\n    constructor() {\n        super();\n\n        this.app = document.querySelector(\"app-backtest5\") as AppBacktest6;\n\n        this.formElement = this.querySelector(\"form\") as HTMLFormElement;\n        this.marketsInput = this.querySelector(\n            'input[name=\"markets\"]'\n        ) as HTMLInputElement;\n        // this.marketsButton = this.querySelector(\n        //     \".marketsButton\"\n        // ) as HTMLButtonElement;\n        this.countInput = this.querySelector(\n            \"input[name=count]\"\n        ) as HTMLInputElement;\n        this.investmentPriceElement = this.querySelector(\n            \".investmentPrice\"\n        ) as HTMLElement;\n\n        this.onSubmit = this.onSubmit.bind(this);\n        // this.onClickMarkets = this.onClickMarkets.bind(this);\n    }\n\n    connectedCallback() {\n        this.formElement.addEventListener(\"submit\", this.onSubmit);\n        // this.marketsButton.addEventListener(\"click\", this.onClickMarkets);\n    }\n\n    disconnectedCallback() {\n        this.formElement.removeEventListener(\"submit\", this.onSubmit);\n        // this.marketsButton.removeEventListener(\"click\", this.onClickMarkets);\n    }\n\n    public render() {\n        if (!this.app) return;\n\n        this.marketsInput.value = this.app.markets.join(\", \");\n        this.countInput.value = this.app.count.toString();\n        this.investmentPriceElement.textContent =\n            this.app.investmentAmount.toLocaleString();\n    }\n\n    public initialize() {}\n\n    // private onClickMarkets() {\n    //     this.app.markets = this.marketsInput.value.split(\",\");\n    //     this.app.initialize();\n    //     this.app.runBackTest();\n    // }\n\n    private onSubmit(event: Event) {\n        event?.preventDefault();\n        if (!this.app) return;\n\n        this.app.markets = this.marketsInput.value.split(\",\");\n        const maxSize = Number(this.countInput.getAttribute(\"max\"));\n        this.app.count =\n            Number(this.countInput.value) > maxSize\n                ? maxSize\n                : Number(this.countInput.value);\n\n        this.countInput.value = this.app.count.toString();\n        this.app.initialize();\n        this.app.runBackTest();\n    }\n}\n", "import {\n    cloneTemplate,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\n\nexport default class BacktestTable extends HTMLElement {\n    private data: IBacktest5[];\n    private market: string;\n\n    private navElement: HTMLElement;\n    private dataElement: HTMLElement;\n\n    private tableTemplate: HTMLTemplateElement;\n    private itemTemplate: HTMLTemplateElement;\n\n    private activedTable: HTMLElement | null;\n    private activedTab: HTMLElement | null;\n\n    constructor() {\n        super();\n\n        this.data = [];\n        this.market = \"\";\n\n        this.activedTable = null;\n        this.activedTab = null;\n\n        this.navElement = this.querySelector(\"nav\") as HTMLElement;\n        this.dataElement = this.querySelector(\".dataTable\") as HTMLElement;\n\n        this.tableTemplate = document.querySelector(\n            \"#tp-table\"\n        ) as HTMLTemplateElement;\n        this.itemTemplate = document.querySelector(\n            \"#tp-item\"\n        ) as HTMLTemplateElement;\n\n        this.addNavEvent = this.addNavEvent.bind(this);\n    }\n\n    connectedCallback() {}\n\n    public initialize() {\n        this.data = [];\n        this.market = \"\";\n\n        this.activedTable = null;\n        this.activedTab = null;\n\n        this.navElement.innerHTML = \"\";\n        this.dataElement.innerHTML = \"\";\n    }\n\n    public render(data: IBacktest5[], index: number) {\n        this.data = data;\n        this.market = this.data[0].market;\n\n        this.renderNav(index);\n        this.renderTable(index);\n    }\n\n    private renderNav(index: number) {\n        const tabElement = document.createElement(\"a\") as HTMLAnchorElement;\n        tabElement.textContent = this.market;\n        tabElement.href = `#${this.market}`;\n\n        if (index === 0) {\n            tabElement.dataset.active = \"true\";\n            this.activedTab = tabElement;\n        }\n\n        this.navElement.appendChild(tabElement);\n        tabElement.addEventListener(\"click\", this.addNavEvent);\n    }\n\n    private addNavEvent(event: Event) {\n        event.preventDefault();\n        const target = event.target as HTMLAnchorElement;\n\n        const targetTable = document.querySelector(target.hash) as HTMLElement;\n        this.activateTalble(targetTable);\n        this.activateNav(target);\n    }\n\n    private renderTable(index: number) {\n        const cloned = this.crateTable();\n\n        if (index === 0) {\n            cloned.hidden = false;\n            this.activedTable = cloned;\n        } else {\n            cloned.hidden = true;\n        }\n\n        this.dataElement.appendChild(cloned);\n    }\n\n    private crateTable() {\n        const cloned = cloneTemplate<HTMLElement>(this.tableTemplate);\n\n        const fragment = new DocumentFragment();\n        this.data\n            .map((aData: IBacktest5, index) => this.createItem(aData, index))\n            .forEach((cloned: HTMLElement) => fragment.appendChild(cloned));\n        cloned.id = this.market;\n        cloned.dataset.market = this.market;\n        cloned.appendChild(fragment);\n\n        return cloned;\n    }\n\n    private createItem(aData: IBacktest5, index: number) {\n        const cloned = cloneTemplate<HTMLElement>(this.itemTemplate);\n\n        const parseData = {\n            index,\n            date: aData.date.slice(0, 10),\n            range: aData.range?.toLocaleString(),\n            condition: aData.buyCondition.toString(),\n            action: aData.action?.toString(),\n            standardPrice: aData.standardPrice?.toLocaleString() || \"\",\n            buyPrice:\n                (aData.buyPrice &&\n                    Math.round(aData.buyPrice).toLocaleString()) ||\n                \"\",\n            sellPrice:\n                (aData.sellPrice &&\n                    Math.round(aData.sellPrice).toLocaleString()) ||\n                \"\",\n            rate: (aData.rate && aData.rate * 100)?.toFixed(2) || \"\",\n            profit:\n                (aData.profit && Math.round(aData.profit).toLocaleString()) ||\n                \"\",\n            sumProfit:\n                aData.sumProfit && Math.round(aData.sumProfit).toLocaleString(),\n        };\n\n        updateElementsTextWithData(parseData, cloned);\n\n        cloned.dataset.action = aData.action?.toString();\n\n        return cloned;\n    }\n\n    private hideDataTables() {\n        const tables = this.dataElement.querySelectorAll(\"table\");\n        for (const t of tables) {\n            t.hidden = true;\n        }\n    }\n\n    private activateNav(tabElement: HTMLAnchorElement) {\n        tabElement.dataset.active = \"true\";\n\n        if (this.activedTab) this.activedTab.dataset.active = \"false\";\n        this.activedTab = tabElement;\n    }\n\n    private activateTalble(table: HTMLElement) {\n        table.hidden = false;\n\n        if (this.activedTable) this.activedTable.hidden = true;\n        this.activedTable = table;\n    }\n}\n", "import AppBacktest6 from \"./AppBacktest6\";\nimport Overview from \"./Overview\";\nimport Control from \"./Control\";\nimport Table from \"./Table\";\n\ncustomElements.define(\"backtest-table\", Table);\ncustomElements.define(\"backtest-control\", Control);\ncustomElements.define(\"backtest-overview\", Overview);\ncustomElements.define(\"app-backtest5\", AppBacktest6);\n"],
  "mappings": "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",
  "names": ["cloned"]
}

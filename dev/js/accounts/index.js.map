{
  "version": 3,
  "sources": ["../../../app/scripts/pages/accounts/AppAccounts.ts", "../../../app/scripts/pages/accounts/index.ts"],
  "sourcesContent": ["export default class AppAccounts extends HTMLElement {\n    private template: HTMLTemplateElement;\n\n    constructor() {\n        super();\n\n        this.template = this.querySelector(\n            \"#accountItem\"\n        ) as HTMLTemplateElement;\n    }\n\n    connectedCallback() {\n        this.fetch();\n    }\n\n    private async fetch() {\n        try {\n            const accountsdata = await this.fetchAccounts();\n            const markets = accountsdata.accounts.map(\n                (d: any) => `${d.unit_currency}-${d.currency}`\n            );\n            const tickerData = await this.fetchTikcer(markets);\n\n            this.renderAssests(accountsdata.assets);\n            const result = await this.transformData(\n                accountsdata.accounts,\n                tickerData\n            );\n            this.render(result);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    private transformData(accounts: any, tickerData: any) {\n        const tickerNames = tickerData.map((t: any) => t.market);\n\n        const result = accounts.map((aAccount: any, index: number) => {\n            const {\n                avg_buy_price,\n                buy_price,\n                currency,\n                locked,\n                unit_currency,\n                volume,\n            } = aAccount;\n\n            const marketName = `${aAccount.unit_currency}-${aAccount.currency}`;\n            const tickerIndex = tickerNames.indexOf(marketName);\n            const ticker = tickerData[tickerIndex];\n\n            const price1 = avg_buy_price * volume;\n            const price2 = ticker.trade_price * volume;\n            const profit = price2 - price1;\n            const profitRate = (profit / price1) * 100;\n\n            return {\n                currency: currency,\n                unitCurrency: unit_currency,\n                buyPrice: this.roundToDecimalPlace(\n                    buy_price,\n                    0\n                ).toLocaleString(),\n                avgBuyPrice: this.roundToDecimalPlace(\n                    avg_buy_price,\n                    1\n                ).toLocaleString(),\n                volume,\n                locked,\n                profit: Math.round(profit),\n                profitRate,\n            };\n        });\n\n        return result;\n    }\n\n    private async fetchAccounts() {\n        try {\n            const response = await fetch(`/accounts`);\n            return await response.json();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    private async fetchTikcer(markets: Array<string>) {\n        try {\n            const response = await fetch(`/ticker?markets=${markets}`);\n            return await response.json();\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    private renderAssests(data: any) {\n        const assetsElement = this.querySelector(\".assets\") as HTMLElement;\n        const element = assetsElement.cloneNode(true) as HTMLElement;\n\n        const totalAsset = Number(data.balance) + Number(data.locked);\n\n        let tp = `<h4>My Asset</h4>`;\n        tp += `<p>\uBCF4\uC720 ${data.unit_currency} : ${this.roundToDecimalPlace(\n            totalAsset,\n            0\n        ).toLocaleString()}</p>`;\n\n        tp += `<p>locked ${data.unit_currency} : ${this.roundToDecimalPlace(\n            data.locked,\n            0\n        ).toLocaleString()}</p>`;\n        element.innerHTML = tp;\n        assetsElement.replaceWith(element);\n    }\n\n    private render(data: any) {\n        const fragment = new DocumentFragment();\n        data.map((data: any) => this.createElement(data)).forEach(\n            (element: HTMLLIElement) => fragment.appendChild(element)\n        );\n        this.querySelector(\".accounts\")?.appendChild(fragment);\n    }\n\n    private createElement(aAccount: any) {\n        const element = this.template?.content.firstElementChild?.cloneNode(\n            true\n        ) as HTMLElement;\n\n        (element.querySelector(\".currency\") as HTMLElement).textContent =\n            aAccount.currency;\n        (element.querySelector(\".unitCurrency\") as HTMLElement).textContent =\n            aAccount.unitCurrency;\n        (element.querySelector(\".buyPrice\") as HTMLElement).textContent =\n            aAccount.buyPrice;\n        (element.querySelector(\".avgBuyPrice\") as HTMLElement).textContent =\n            aAccount.avgBuyPrice;\n        (element.querySelector(\".volume\") as HTMLElement).textContent =\n            aAccount.volume;\n        // (element.querySelector(\".locked\") as HTMLElement).textContent =\n        //     aAccount.locked;\n\n        const isPlus = aAccount.profit > 0 ? true : false;\n\n        const profitElement = element.querySelector(\".profit\") as HTMLElement;\n        profitElement.textContent = aAccount.profit;\n\n        (\n            element.querySelector(\".profitRate\") as HTMLElement\n        ).textContent = `${aAccount.profitRate.toFixed(2)}%`;\n\n        (profitElement.closest(\"li\") as HTMLElement).dataset.increase =\n            isPlus.toString();\n\n        return element;\n    }\n\n    private roundToDecimalPlace(amount: number, point: number) {\n        const decimalPoint = point > 0 ? 10 * point : 1;\n        return Math.round(amount * decimalPoint) / decimalPoint;\n    }\n}\n", "import AppAccounts from \"./AppAccounts\";\n\ncustomElements.define(\"app-accounts\", AppAccounts);\n"],
  "mappings": "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",
  "names": ["data"]
}

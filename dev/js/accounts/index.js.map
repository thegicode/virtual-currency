{
  "version": 3,
  "sources": ["../../../app/scripts/utils/helpers.ts", "../../../app/scripts/pages/accounts/AccountItem.ts", "../../../app/scripts/pages/accounts/AppAccounts.ts", "../../../app/scripts/pages/accounts/index.ts"],
  "sourcesContent": ["export function cloneTemplate<T extends HTMLElement>(\n    template: HTMLTemplateElement\n) {\n    const content = template.content.firstElementChild;\n    if (!content) {\n        throw new Error(\"Template content is empty\");\n    }\n    return content.cloneNode(true) as T;\n}\n\nexport function updateElementsTextWithData<T>(data: T, container: HTMLElement) {\n    Object.entries(data as Record<string, unknown>).forEach(([key, value]) => {\n        const element = container.querySelector(`.${key}`) as HTMLElement;\n        element.textContent = String(value);\n    });\n}\n\nexport function roundToDecimalPlace(amount: number, point: number) {\n    const decimalPoint = Math.pow(10, point);\n    return Math.round(amount * decimalPoint) / decimalPoint;\n}\n", "import {\n    cloneTemplate,\n    roundToDecimalPlace,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\n\nexport default class AccountItem extends HTMLElement {\n    private data: IProcessedAccountData;\n    private template: HTMLTemplateElement;\n\n    constructor(data: IProcessedAccountData) {\n        super();\n\n        this.data = data;\n\n        this.template = document.querySelector(\n            \"#accountItem\"\n        ) as HTMLTemplateElement;\n    }\n\n    connectedCallback() {\n        this.createElement();\n    }\n\n    private createElement() {\n        const cloned = cloneTemplate<HTMLElement>(this.template);\n\n        const contentData = {\n            currency: this.data.currency,\n            unitCurrency: this.data.unitCurrency,\n            volume: this.data.volume,\n            buyPrice: roundToDecimalPlace(\n                this.data.buyPrice,\n                0\n            ).toLocaleString(),\n            avgBuyPrice: roundToDecimalPlace(\n                this.data.avgBuyPrice,\n                1\n            ).toLocaleString(),\n            profit: Math.round(this.data.profit).toLocaleString(),\n            profitRate: roundToDecimalPlace(this.data.profitRate, 2) + \"%\",\n        };\n\n        updateElementsTextWithData(contentData, cloned);\n\n        this.innerHTML = cloned.innerHTML;\n\n        const isIncrement = this.data.profit > 0 ? true : false;\n        this.dataset.increase = isIncrement.toString();\n\n        // [TODO] orders-chance\n        // this.ordersChance(anAccount.market);\n    }\n}\n", "import {\n    roundToDecimalPlace,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\n\nimport AccountItem from \"./AccountItem\";\n\nexport default class AppAccounts extends HTMLElement {\n    private list: HTMLElement;\n\n    constructor() {\n        super();\n\n        this.list = this.querySelector(\".accountsList\") as HTMLElement;\n    }\n\n    connectedCallback() {\n        this.loadAccountData();\n\n        // ing...\n        this.ordered();\n    }\n\n    private async ordered() {\n        try {\n            const response = await this.fetchData(`/ordered`);\n            console.log(\"ordered\", response);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    private async loadAccountData() {\n        try {\n            const accountsResponse = await this.fetchData(`/accounts`);\n\n            const markets = accountsResponse.accounts.map(\n                (anAccount: IAccount) =>\n                    `${anAccount.unit_currency}-${anAccount.currency}`\n            );\n            const tickerResponse = await this.fetchData(\n                `/ticker?markets=${encodeURIComponent(markets)}`\n            );\n\n            this.displayAssets(accountsResponse.assets);\n\n            const processedAccounts = await this.processAccountsData(\n                accountsResponse.accounts,\n                tickerResponse\n            );\n\n            this.renderAccountsList(processedAccounts);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n\n    private async fetchData(url: string) {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private displayAssets(data: IAsset) {\n        const element = this.querySelector(\".assets\") as HTMLElement;\n\n        const totalAsset = Number(data.balance) + Number(data.locked);\n\n        const contentData = {\n            totalAsset: roundToDecimalPlace(totalAsset, 0).toLocaleString(),\n            locked: roundToDecimalPlace(data.locked, 0).toLocaleString(),\n            unit: data.unit_currency,\n        };\n\n        updateElementsTextWithData(contentData, element);\n\n        delete element.dataset.loading;\n    }\n\n    private processAccountsData(accounts: IAccount[], tickerData: ITicker[]) {\n        function _handleData(account: IAccount) {\n            const marketName = `${account.unit_currency}-${account.currency}`;\n            const ticker = tickerData.find((t) => t.market === marketName);\n\n            if (!ticker) {\n                console.error(`Ticker not found for market: ${marketName}`);\n                return null;\n            }\n\n            const priceAtBuy = account.avg_buy_price * account.volume;\n            const currentPrice = ticker.trade_price * account.volume;\n            const profit = currentPrice - priceAtBuy;\n            const profitRate = priceAtBuy > 0 ? (profit / priceAtBuy) * 100 : 0;\n\n            return {\n                market: marketName,\n                currency: account.currency,\n                unitCurrency: account.unit_currency,\n                buyPrice: account.buy_price,\n                avgBuyPrice: account.avg_buy_price,\n                volume: account.volume,\n                locked: account.locked,\n                profit,\n                profitRate,\n            };\n        }\n\n        return accounts\n            .map((account) => _handleData(account))\n            .filter((account) => account !== null) as IProcessedAccountData[];\n    }\n\n    private renderAccountsList(data: IProcessedAccountData[]) {\n        const fragment = new DocumentFragment();\n\n        data.map((data) => new AccountItem(data)).forEach((accountItem) => {\n            fragment.appendChild(accountItem);\n        });\n\n        this.list.appendChild(fragment);\n\n        delete this.list.dataset.loading;\n    }\n}\n", "import AppAccounts from \"./AppAccounts\";\nimport AccountItem from \"./AccountItem\";\n\ncustomElements.define(\"app-accounts\", AppAccounts);\ncustomElements.define(\"account-item\", AccountItem);\n"],
  "mappings": "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",
  "names": ["data"]
}

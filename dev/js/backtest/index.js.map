{
  "version": 3,
  "sources": ["../../../app/scripts/utils/helpers.ts", "../../../app/scripts/pages/backtest/AppBacktest.ts", "../../../app/scripts/pages/backtest/index.ts"],
  "sourcesContent": ["export function cloneTemplate<T extends HTMLElement>(\n    template: HTMLTemplateElement\n) {\n    const content = template.content.firstElementChild;\n    if (!content) {\n        throw new Error(\"Template content is empty\");\n    }\n    return content.cloneNode(true) as T;\n}\n\nexport function updateElementsTextWithData<T>(data: T, container: HTMLElement) {\n    Object.entries(data as Record<string, unknown>).forEach(([key, value]) => {\n        const element = container.querySelector(`.${key}`) as HTMLElement;\n        element.textContent = String(value);\n    });\n}\n\nexport function roundToDecimalPlace(amount: number, point: number) {\n    const decimalPoint = Math.pow(10, point);\n    return Math.round(amount * decimalPoint) / decimalPoint;\n}\n", "import {\n    cloneTemplate,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\n\nexport default class AppBacktest extends HTMLElement {\n    private data: ICandles[];\n\n    constructor() {\n        super();\n        this.data = [];\n    }\n\n    connectedCallback() {\n        console.log(\"AppBacktest\");\n\n        this.loadAndRender();\n    }\n\n    private async loadAndRender() {\n        const responseData = await this.getCandles();\n        this.data = this.setMovingAverage(responseData);\n        this.setData();\n        this.render();\n    }\n\n    private async getCandles() {\n        const response = await fetch(\"/fetchCandles\");\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private setMovingAverage(responseData: ICandles[]) {\n        const result = responseData.slice(4).map((aData, index) => {\n            // console.log(\"!!!!!\", index, aData);\n            let sum = 0;\n\n            // index 0 : responseData 0, 1, 2, 3, 4\n            // index 1 : responseData 1, 2, 3, 4, 5\n            // index 2 : responseData 2, 3, 4, 5, 6\n\n            for (let i = 0; i < 5; i++) {\n                // console.log(index + i);\n                // console.log(responseData[index + i]);\n                sum += Number(responseData[index + i].trade_price);\n            }\n\n            return {\n                ...aData,\n                moving_average_5: sum / 5,\n            };\n        });\n        return result;\n    }\n\n    private setData() {\n        this.data = this.data.map((aData) => {\n            if (!aData.moving_average_5) return aData;\n\n            return {\n                ...aData,\n                condition: aData.moving_average_5 > Number(aData.trade_price),\n            };\n        });\n    }\n\n    private async render() {\n        const fragment = new DocumentFragment();\n\n        this.data\n            .map((aData: ICandles) => this.createItem(aData))\n            .forEach((cloned: HTMLElement) => fragment.appendChild(cloned));\n\n        this.querySelector(\"table\")?.appendChild(fragment);\n    }\n\n    private createItem(aData: ICandles) {\n        const tpElement = document.querySelector(\n            \"#tp-item\"\n        ) as HTMLTemplateElement;\n        tpElement;\n\n        const cloned = cloneTemplate<HTMLElement>(tpElement);\n        if (!aData.moving_average_5) return cloned;\n\n        const parseData = {\n            ...aData,\n            candle_date_time_kst: aData.candle_date_time_kst.replace(\"T\", \" \"),\n            opening_price: aData.opening_price.toLocaleString(),\n            trade_price: aData.trade_price.toLocaleString(),\n            prev_closing_price: aData.prev_closing_price.toLocaleString(),\n            moving_average_5:\n                aData.moving_average_5 &&\n                aData.moving_average_5.toLocaleString(),\n        };\n\n        console.log(parseData);\n\n        updateElementsTextWithData(parseData, cloned);\n\n        return cloned;\n    }\n}\n", "import AppBacktest from \"./AppBacktest\";\n\ncustomElements.define(\"app-backtest\", AppBacktest);\n"],
  "mappings": ";;;AAAO,WAAS,cACZ,UACF;AACE,UAAM,UAAU,SAAS,QAAQ;AACjC,QAAI,CAAC,SAAS;AACV,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC/C;AACA,WAAO,QAAQ,UAAU,IAAI;AAAA,EACjC;AAEO,WAAS,2BAA8B,MAAS,WAAwB;AAC3E,WAAO,QAAQ,IAA+B,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACtE,YAAM,UAAU,UAAU,cAAc,IAAI,GAAG,EAAE;AACjD,cAAQ,cAAc,OAAO,KAAK;AAAA,IACtC,CAAC;AAAA,EACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA,MAAqB,cAArB,cAAyC,YAAW;IAGhD,cAAA;AACI,YAAK;AACL,WAAK,OAAO,CAAA;IAChB;IAEA,oBAAiB;AACb,cAAQ,IAAI,aAAa;AAEzB,WAAK,cAAa;IACtB;IAEc,gBAAa;;AACvB,cAAM,eAAe,MAAM,KAAK,WAAU;AAC1C,aAAK,OAAO,KAAK,iBAAiB,YAAY;AAC9C,aAAK,QAAO;AACZ,aAAK,OAAM;MACf,CAAC;;IAEa,aAAU;;AACpB,cAAM,WAAW,MAAM,MAAM,eAAe;AAC5C,YAAI,CAAC,SAAS,IAAI;AACd,gBAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;;AAE5D,eAAO,MAAM,SAAS,KAAI;MAC9B,CAAC;;IAEO,iBAAiB,cAAwB;AAC7C,YAAM,SAAS,aAAa,MAAM,CAAC,EAAE,IAAI,CAAC,OAAO,UAAS;AAEtD,YAAI,MAAM;AAMV,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAGxB,iBAAO,OAAO,aAAa,QAAQ,CAAC,EAAE,WAAW;;AAGrD,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,KAAK,GAAA,EACR,kBAAkB,MAAM,EAAC,CAAA;MAEjC,CAAC;AACD,aAAO;IACX;IAEQ,UAAO;AACX,WAAK,OAAO,KAAK,KAAK,IAAI,CAAC,UAAS;AAChC,YAAI,CAAC,MAAM;AAAkB,iBAAO;AAEpC,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,KAAK,GAAA,EACR,WAAW,MAAM,mBAAmB,OAAO,MAAM,WAAW,EAAC,CAAA;MAErE,CAAC;IACL;IAEc,SAAM;;;AAChB,cAAM,WAAW,IAAI,iBAAgB;AAErC,aAAK,KACA,IAAI,CAAC,UAAoB,KAAK,WAAW,KAAK,CAAC,EAC/C,QAAQ,CAAC,WAAwB,SAAS,YAAY,MAAM,CAAC;AAElE,SAAA,KAAA,KAAK,cAAc,OAAO,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE,YAAY,QAAQ;;;IAG7C,WAAW,OAAe;AAC9B,YAAM,YAAY,SAAS,cACvB,UAAU;AAEd;AAEA,YAAM,SAAS,cAA2B,SAAS;AACnD,UAAI,CAAC,MAAM;AAAkB,eAAO;AAEpC,YAAM,YAAS,OAAA,OAAA,OAAA,OAAA,CAAA,GACR,KAAK,GAAA,EACR,sBAAsB,MAAM,qBAAqB,QAAQ,KAAK,GAAG,GACjE,eAAe,MAAM,cAAc,eAAc,GACjD,aAAa,MAAM,YAAY,eAAc,GAC7C,oBAAoB,MAAM,mBAAmB,eAAc,GAC3D,kBACI,MAAM,oBACN,MAAM,iBAAiB,eAAc,EAAE,CAAA;AAG/C,cAAQ,IAAI,SAAS;AAErB,iCAA2B,WAAW,MAAM;AAE5C,aAAO;IACX;;;;ACrGJ,iBAAe,OAAO,gBAAgB,WAAW;",
  "names": []
}

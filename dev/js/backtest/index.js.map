{
  "version": 3,
  "sources": ["../../../app/scripts/utils/helpers.ts", "../../../app/scripts/pages/backtest/AppBacktest.ts", "../../../app/scripts/pages/backtest/index.ts"],
  "sourcesContent": ["export function cloneTemplate<T extends HTMLElement>(\n    template: HTMLTemplateElement\n) {\n    const content = template.content.firstElementChild;\n    if (!content) {\n        throw new Error(\"Template content is empty\");\n    }\n    return content.cloneNode(true) as T;\n}\n\nexport function updateElementsTextWithData<T>(data: T, container: HTMLElement) {\n    Object.entries(data as Record<string, unknown>).forEach(([key, value]) => {\n        const element = container.querySelector(`.${key}`) as HTMLElement;\n        element.textContent = String(value);\n    });\n}\n\nexport function roundToDecimalPlace(amount: number, point: number) {\n    const decimalPoint = Math.pow(10, point);\n    return Math.round(amount * decimalPoint) / decimalPoint;\n}\n", "import {\n    cloneTemplate,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\n\nexport default class AppBacktest extends HTMLElement {\n    private data: ICandles[];\n    private market: string;\n    private period: number;\n    private fee: number; // TODO\n    private investmentPrice: number;\n    private allSumPrice: number;\n    private allSumSize: number;\n    private periodInput: HTMLInputElement;\n\n    constructor() {\n        super();\n\n        this.data = [];\n        this.market = \"KRW-BTC\";\n        this.period = 100;\n        this.investmentPrice = 500000;\n        this.fee = 0.00139;\n\n        this.allSumPrice = 0;\n        this.allSumSize = 0;\n\n        this.periodInput = this.querySelector(\n            \"input[name=period]\"\n        ) as HTMLInputElement;\n\n        this.onChangeMarket = this.onChangeMarket.bind(this);\n        this.onOptionSubmit = this.onOptionSubmit.bind(this);\n    }\n\n    connectedCallback() {\n        this.initialize();\n\n        this.loadAndRender();\n\n        this.querySelector(\"select\")?.addEventListener(\n            \"change\",\n            this.onChangeMarket\n        );\n\n        this.querySelector(\"form\")?.addEventListener(\n            \"submit\",\n            this.onOptionSubmit\n        );\n    }\n\n    private initialize() {\n        this.periodInput.value = this.period.toString();\n        (this.querySelector(\".investmentPrice\") as HTMLElement).textContent =\n            this.investmentPrice.toLocaleString();\n    }\n\n    private async loadAndRender() {\n        const originData = await this.getCandles();\n        this.calculateMovingAverage(originData); // 5\uC77C \uC774\uB3D9\uD3C9\uADE0\uC120\n        this.enrichingData();\n        this.render();\n        this.renderSummary();\n    }\n\n    private async getCandles() {\n        const searchParams = new URLSearchParams({\n            market: this.market,\n            count: this.period.toString(),\n        });\n\n        const response = await fetch(`/fetchCandles?${searchParams}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private calculateMovingAverage(originData: ICandles[], period = 5) {\n        this.data = originData.slice(period - 1).map((aData, index) => {\n            // console.log(\"!!!!!\", index, aData);\n\n            let sum = 0;\n\n            for (let i = 0; i < period; i++) {\n                // console.log(index + i, originData[index + i]);\n                sum += originData[index + i].trade_price;\n            }\n\n            return {\n                ...aData,\n                moving_average_5: sum / period,\n            };\n        });\n    }\n\n    private enrichingData() {\n        // condition\n        this.data = this.data.map((aData) => {\n            if (!aData.moving_average_5) return aData;\n\n            return {\n                ...aData,\n                condition: aData.moving_average_5 > aData.trade_price,\n            };\n        });\n\n        // action\n        this.data = this.data.map((aData, index) => {\n            let action = \"\";\n            if (index === 0) {\n                if (aData.condition) action = \"Buy\";\n                else if (!aData.condition) action = \"\";\n            } else {\n                const prevCondition = this.data[index - 1].condition;\n                if (prevCondition && aData.condition) {\n                    action = \"Hold\";\n                } else if (prevCondition && !aData.condition) {\n                    action = \"Sell\";\n                } else if (!prevCondition && aData.condition) {\n                    action = \"Buy\";\n                } else if (!prevCondition && !aData.condition) {\n                    action = \"none\";\n                }\n            }\n\n            return {\n                ...aData,\n                action,\n            };\n        });\n\n        // order\n        // const investmentAmount = 200000;\n        let orderPrice = 0;\n        let profit = 0;\n        let totalProfit = 0;\n        let total = 0;\n        this.data = this.data.map((aData) => {\n            switch (aData.action) {\n                case \"Buy\":\n                    orderPrice = aData.trade_price;\n                    profit = 0;\n                    total = total || this.investmentPrice;\n\n                    // console.log(\"Buy\", aData.candle_date_time_kst, orderPrice);\n\n                    break;\n                case \"Sell\":\n                    const rate = (aData.trade_price - orderPrice) / orderPrice;\n                    profit = rate * total || this.investmentPrice;\n                    totalProfit += profit;\n                    total = this.investmentPrice + totalProfit;\n\n                    // console.log(\n                    //     \"Sell\",\n                    //     aData.candle_date_time_kst,\n                    //     \"orderPrice:\",\n                    //     orderPrice,\n                    //     \"trade_price: \",\n                    //     aData.trade_price,\n                    //     aData.trade_price - orderPrice\n                    // );\n\n                    break;\n                case \"none\":\n                    profit = 0;\n                    break;\n            }\n\n            return {\n                ...aData,\n                profit,\n                totalProfit,\n                total,\n            };\n        });\n    }\n\n    private render() {\n        const tableElement = this.querySelector(\"tbody\") as HTMLElement;\n\n        tableElement.innerHTML = \"\";\n        const fragment = new DocumentFragment();\n\n        this.data\n            .map((aData: ICandles, index) => this.createItem(aData, index))\n            .forEach((cloned: HTMLElement) => fragment.appendChild(cloned));\n\n        tableElement?.appendChild(fragment);\n    }\n\n    private createItem(aData: ICandles, index: number) {\n        const tpElement = document.querySelector(\n            \"#tp-item\"\n        ) as HTMLTemplateElement;\n        tpElement;\n\n        const cloned = cloneTemplate<HTMLElement>(tpElement);\n        if (!aData.moving_average_5) return cloned;\n\n        const parseData = {\n            ...aData,\n            index,\n            candle_date_time_kst: aData.candle_date_time_kst.replace(\"T\", \" \"),\n            opening_price: aData.opening_price.toLocaleString(),\n            trade_price: aData.trade_price.toLocaleString(),\n            moving_average_5:\n                aData.moving_average_5 &&\n                aData.moving_average_5.toLocaleString(),\n            profit: aData.profit && Math.round(aData.profit).toLocaleString(),\n            totalProfit:\n                aData.totalProfit &&\n                Math.round(aData.totalProfit).toLocaleString(),\n            total: aData.total && Math.round(aData.total).toLocaleString(),\n        };\n\n        updateElementsTextWithData(parseData, cloned);\n\n        cloned.dataset.action = aData.action;\n\n        return cloned;\n    }\n\n    private renderSummary() {\n        if (this.data.length === 0) return;\n\n        const tpElement = document.querySelector(\n            \"#tp-summary\"\n        ) as HTMLTemplateElement;\n\n        const summaryListElement = this.querySelector(\n            \".summary-list\"\n        ) as HTMLElement;\n\n        const cloned = cloneTemplate<HTMLElement>(tpElement);\n        const deleteButton = cloned.querySelector(\n            \".deleteButton\"\n        ) as HTMLButtonElement;\n\n        const lastProfit = this.data[this.data.length - 1].totalProfit;\n        if (!lastProfit) return;\n\n        const totalRate = Math.round((lastProfit / this.investmentPrice) * 100);\n\n        const summaryData = {\n            market: this.market,\n            period: this.period,\n            totalRate: `${totalRate} %`,\n            lastProfit: ` ${Math.round(lastProfit).toLocaleString()} \uC6D0`,\n        };\n\n        updateElementsTextWithData(summaryData, cloned);\n\n        summaryListElement.appendChild(cloned);\n\n        // summary-all\n        this.allSumPrice += lastProfit;\n        this.allSumSize++;\n\n        this.renderAllSum();\n\n        // delete\n\n        deleteButton.addEventListener(\"click\", () => {\n            cloned.remove();\n            this.allSumPrice -= lastProfit;\n            this.allSumSize--;\n\n            this.renderAllSum();\n        });\n    }\n\n    private renderAllSum() {\n        const allSumRate =\n            (this.allSumPrice / (this.allSumSize * this.investmentPrice)) * 100;\n\n        const allSumData = {\n            allSumPrice: Math.round(this.allSumPrice).toLocaleString(),\n            allSumRate: allSumRate.toFixed(2).toLocaleString(),\n        };\n        const summaryAllElement = this.querySelector(\n            \".summary-all\"\n        ) as HTMLElement;\n        updateElementsTextWithData(allSumData, summaryAllElement);\n    }\n\n    private onChangeMarket(event: Event) {\n        const target = event.target as HTMLInputElement;\n        this.market = target.value;\n        this.loadAndRender();\n    }\n\n    private onOptionSubmit(event: Event) {\n        event?.preventDefault();\n        const maxSize = Number(this.periodInput.getAttribute(\"max\"));\n\n        this.period =\n            Number(this.periodInput.value) > maxSize\n                ? maxSize\n                : Number(this.periodInput.value);\n\n        this.periodInput.value = this.period.toString();\n\n        this.loadAndRender();\n    }\n}\n", "import AppBacktest from \"./AppBacktest\";\n\ncustomElements.define(\"app-backtest\", AppBacktest);\n"],
  "mappings": "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",
  "names": []
}

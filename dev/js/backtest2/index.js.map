{
  "version": 3,
  "sources": ["../../../app/scripts/components/backtest/movingAverage.ts", "../../../app/scripts/components/backtest/volatility.ts", "../../../app/scripts/utils/helpers.ts", "../../../app/scripts/pages/backtest2/AppBacktest2.ts", "../../../app/scripts/pages/backtest2/index.ts"],
  "sourcesContent": ["function setMovingAverage(data: any[], period = 5) {\n    const result = data.map((aData, index) => {\n        if (index < period - 1) {\n            return aData;\n        }\n\n        const average = calculateMovingAverage(data, index, period);\n\n        return {\n            ...aData,\n            [`moving_average_${period}`]: average,\n        };\n    });\n\n    return result;\n}\n\nfunction calculateMovingAverage(data: any, index: number, period = 5) {\n    let sum = 0;\n\n    for (let i = 0; i < period; i++) {\n        sum += data[index - i].trade_price;\n    }\n\n    return sum / period;\n}\n\n// checkMovingAverage\n\nexport { setMovingAverage };\n", "// \uBCC0\uB3D9\uC131 \uAD6C\uD558\uAE30\n\nfunction getDaliyVolatility(aData: any) {\n    const result =\n        ((aData.high_price - aData.low_price) / aData.opening_price) * 100;\n\n    return Number(result.toFixed(2));\n}\n\nfunction getVolatility(dataList: any, index: number) {\n    if (index < 5) {\n        return;\n    }\n\n    let sum = 0;\n\n    // for (let i = 5; i > 0; i--) {\n    //     sum += dataList[index - i].daily_volatility;\n    // }\n\n    for (let i = index - 5; i < index; i++) {\n        sum += dataList[i].daily_volatility;\n    }\n\n    return Number((sum / 5).toFixed(2));\n}\n\n//\nfunction volatilityBreakout(\n    prevData: { high_price: number; low_price: number },\n    realPrice: number,\n    openingPrice: number,\n    k: number\n) {\n    // 1. \uC804\uB0A0 \uD558\uB8E8\uB9CC\uC5D0 \uC6C0\uC9C1\uC778 \uCD5C\uB300\uD3ED\n    const range = calculateVolatility(prevData);\n\n    // 2. \uB9E4\uC218 \uAE30\uC900 : \uC2E4\uC2DC\uAC04 \uAC00\uACA9 > \uB2F9\uC77C \uC2DC\uAC00 + (\uB808\uC778\uC9C0 * k)\n    const standardPrice = openingPrice + range * k;\n\n    const buyCondition = realPrice > standardPrice;\n\n    return {\n        range,\n        standardPrice,\n        buyCondition,\n    };\n}\n\nfunction calculateVolatility(data: any) {\n    return data.high_price - data.low_price;\n}\n\nfunction volatilityRate(data: any) {\n    const range = calculateVolatility(data);\n    return (range / data.opening_price) * 100; // \uC2DC\uAC00 \uAE30\uC900 \uBCC0\uB3D9\uB960\n}\n\nexport {\n    getDaliyVolatility,\n    getVolatility,\n    volatilityBreakout,\n    volatilityRate,\n};\n", "export function cloneTemplate<T extends HTMLElement>(\n    template: HTMLTemplateElement\n) {\n    const content = template.content.firstElementChild;\n    if (!content) {\n        throw new Error(\"Template content is empty\");\n    }\n    return content.cloneNode(true) as T;\n}\n\nexport function updateElementsTextWithData<T>(data: T, container: HTMLElement) {\n    Object.entries(data as Record<string, unknown>).forEach(([key, value]) => {\n        const element = container.querySelector(`.${key}`) as HTMLElement;\n        // console.log(key, value, element);\n        element.textContent = String(value);\n    });\n}\n\nexport function roundToDecimalPlace(amount: number, point: number) {\n    const decimalPoint = Math.pow(10, point);\n    return Math.round(amount * decimalPoint) / decimalPoint;\n}\n", "/**\n * \uD22C\uC790\uC804\uB7B5 3 : 3, 5, 10, 20\uC77C \uC774\uB3D9\uD3C9\uADE0 + \uBCC0\uB3D9\uC131 \uC870\uC808\n * \uAC70\uB798\uBE44\uC6A9 0.2% \uC801\uC6A9\n * \uC774\uB3D9\uD3C9\uADE0\uC120 1\uC77C 1\uD68C \uCCB4\uD06C\n * \uD604\uC7AC \uAC00\uACA9\uC774 4\uAC1C \uC774\uB3D9\uD3C9\uADE0\uBCF4\uB2E4 \uB192\uC740 \uACBD\uC6B0 \uB9E4\uC218 \uB610\uB294 \uBCF4\uC720\n * \uD604\uC7AC \uAC00\uACA9\uC774 4\uAC1C \uC774\uB3D9\uD3C9\uADE0\uBCF4\uB2E4 \uB0AE\uC73C\uBA74 \uB9E4\uB3C4 \uB610\uB294 \uBCF4\uB958\n * \uC790\uAE08\uAD00\uB9AC : \uAC00\uC0C1\uD654\uD3D0\uBCC4 \uD22C\uC785\uAE08\uC561\uC740 (\uD0C0\uAE43\uBCC0\uB3D9\uC131/\uD2B9\uC815 \uD654\uD3D0\uC758 \uBCC0\uB3D9\uC131)/\uAC00\uC0C1\uD654\uD3D0 \uC218\n *  - 1\uC77C \uBCC0\uB3D9\uC131 : (\uACE0\uAC00 - \uC800\uAC00)/\uC2DC\uAC00 * 100(\uBC31\uBD84\uC728)\n *  - \uBCC0\uB3D9\uC131 : \uCD5C\uADFC 5\uC77C\uAC04\uC758 1\uC77C \uBCC0\uB3D9\uC131\uC758 \uD3C9\uADE0\n */\n\n/**\n * TODO\n * \uC218\uC218\uB8CC \uC801\uC6A9\n * \uAC70\uB798 \uD69F\uC218 \uCD94\uAC00\n * \uC2B9\uB960 \uCD94\uAC00\n * \uCD1D \uD22C\uC790\uAE08 \uC785\uB825\n **/\n\nimport { setMovingAverage } from \"@app/scripts/components/backtest/movingAverage\";\nimport {\n    getDaliyVolatility,\n    getVolatility,\n} from \"@app/scripts/components/backtest/volatility\";\nimport {\n    cloneTemplate,\n    updateElementsTextWithData,\n} from \"@app/scripts/utils/helpers\";\n\nexport default class AppBacktest2 extends HTMLElement {\n    private data: ICandles2[];\n    private market: string;\n    private count: number;\n    private totalInvestmentPrice: number;\n    private marketSize: number;\n    private investmentPrice: number;\n    private summaryAllPrice: number;\n    private allSumSize: number;\n    private target: number;\n    private countElement: HTMLInputElement;\n    private selectElement: HTMLSelectElement;\n    private formElement: HTMLFormElement;\n\n    constructor() {\n        super();\n\n        this.data = [];\n        this.market = \"\";\n        this.count = 30;\n        this.marketSize = 5;\n        this.totalInvestmentPrice = 1000000;\n        this.investmentPrice = this.totalInvestmentPrice / this.marketSize;\n        this.summaryAllPrice = 0;\n        this.allSumSize = 0;\n        this.target = 2; // 2%\n\n        this.countElement = this.querySelector(\n            \"input[name=count]\"\n        ) as HTMLInputElement;\n        this.selectElement = this.querySelector(\"select\") as HTMLSelectElement;\n        this.formElement = this.querySelector(\"form\") as HTMLFormElement;\n\n        this.onChangeMarket = this.onChangeMarket.bind(this);\n        this.onOptionSubmit = this.onOptionSubmit.bind(this);\n    }\n\n    connectedCallback() {\n        this.initialize();\n        this.loadAndProcessData();\n\n        this.selectElement.addEventListener(\"change\", this.onChangeMarket);\n        this.formElement.addEventListener(\"submit\", this.onOptionSubmit);\n    }\n\n    disconnectedCallback() {\n        this.selectElement.removeEventListener(\"change\", this.onChangeMarket);\n        this.formElement.removeEventListener(\"submit\", this.onOptionSubmit);\n    }\n\n    private initialize() {\n        this.market = this.selectElement.value;\n        this.countElement.value = this.count.toString();\n        (this.querySelector(\".investmentPrice\") as HTMLElement).textContent =\n            this.investmentPrice.toLocaleString();\n    }\n\n    async loadAndProcessData() {\n        // \uC6D0\uBCF8 \uCE94\uB4E4 \uB370\uC774\uD130 \uB85C\uB4DC\n        const rawData = await this.fetchCandleData();\n        // \uC774\uB3D9\uD3C9\uADE0 \uACC4\uC0B0\n        const movingAverageData = this.calculateMovingAverages(rawData);\n        // \uAC70\uB798 \uC870\uAC74 \uAC80\uC0AC\n        const dataWithConditions =\n            this.assessPriceAgainstAverages(movingAverageData);\n        // \uAC70\uB798 \uC561\uC158 \uACB0\uC815 (\uB9E4\uC218, \uB9E4\uB3C4 \uB4F1)\n        const actionableData = this.determineTradeActions(dataWithConditions);\n        // \uBCC0\uB3D9\uC131 \uACC4\uC0B0\n        const dataWithVolatility = this.calculateVolatility(actionableData);\n        // \uC8FC\uBB38 \uCC98\uB9AC (\uB9E4\uC218/\uB9E4\uB3C4 \uC8FC\uBB38)\n        const orderedData = this.placeOrders(dataWithVolatility);\n        const dataWithProfits = this.calculateProfits(orderedData);\n\n        // 20\uBC88\uC9F8 \uB370\uC774\uD130\uBD80\uD130 \uC0AC\uC6A9 (20\uC77C\uC120 \uC801\uC6A9\uB41C \uB370\uC774\uD130\uBD80\uD130 \uC2DC\uC791)\n        this.data = dataWithProfits.slice(19);\n\n        // \uB370\uC774\uD130 \uB80C\uB354\uB9C1\n        this.render();\n        this.renderSummary();\n    }\n\n    private async fetchCandleData() {\n        const searchParams = new URLSearchParams({\n            market: this.market,\n            count: (this.count + 19).toString(),\n        });\n\n        const response = await fetch(`/fetchCandles?${searchParams}`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    }\n\n    private calculateMovingAverages(originData: ICandles2[]) {\n        let data = setMovingAverage(originData, 3);\n        data = setMovingAverage(data, 5);\n        data = setMovingAverage(data, 10);\n        data = setMovingAverage(data, 20);\n\n        return data;\n    }\n\n    private assessPriceAgainstAverages(dataList: ICandles2[]) {\n        return dataList.map((data) => {\n            const isPriceAboveAverages =\n                data.trade_price > data.moving_average_3 &&\n                data.trade_price > data.moving_average_5 &&\n                data.trade_price > data.moving_average_10 &&\n                data.trade_price > data.moving_average_20\n                    ? true\n                    : false;\n\n            return { ...data, condition: isPriceAboveAverages };\n        });\n    }\n\n    private determineTradeActions(dataList: ICandles2[]) {\n        return dataList.map((data, index) => {\n            let tradingAction = \"\";\n\n            if (index === 0) {\n                tradingAction = data.condition ? \"Buy\" : \"Reserve\";\n            } else {\n                const prevCondition = dataList[index - 1].condition;\n                if (prevCondition !== data.condition) {\n                    tradingAction = data.condition ? \"Buy\" : \"Sell\";\n                } else {\n                    tradingAction = data.condition ? \"Hold\" : \"Reserve\";\n                }\n            }\n\n            return {\n                ...data,\n                tradingAction,\n            };\n        });\n    }\n\n    private calculateVolatility(dataList: ICandles2[]) {\n        const dailyData = dataList.map((aData) => {\n            return {\n                ...aData,\n                daily_volatility: getDaliyVolatility(aData),\n            };\n        });\n\n        const result = dailyData.map((aData, index) => {\n            const volatility = getVolatility(dailyData, index);\n            return {\n                ...aData,\n                volatility,\n            };\n        });\n\n        return result;\n    }\n\n    private placeOrders(dataList: ICandles2[]) {\n        return dataList.map((aData) => {\n            if (aData.tradingAction === \"Buy\" && aData.volatility) {\n                const percent = (this.target / aData.volatility) * 100;\n                const unitPercent = percent / this.marketSize;\n                const result = (this.totalInvestmentPrice * unitPercent) / 100;\n\n                return { ...aData, order_price: Math.round(result) };\n            }\n            return { ...aData };\n        });\n    }\n\n    private calculateProfits(dataList: ICandles2[]) {\n        let buyTradePrice = 0;\n        let orderPrice = 0;\n        let profit = 0;\n        let rate = 0;\n\n        let unrealize_rate = 0;\n        let unrealize_gain = 0;\n        let unrealize_profit = 0;\n\n        let sumProfit = 0;\n        let sumPrice = this.investmentPrice;\n\n        const getRate = (aData: ICandles2) =>\n            (aData.trade_price - buyTradePrice) / buyTradePrice;\n        const getProfit = (aData: ICandles2) => orderPrice * getRate(aData);\n        const getSumPrice = () => this.investmentPrice + sumProfit;\n\n        return dataList.map((aData) => {\n            switch (aData.tradingAction) {\n                case \"Buy\":\n                    buyTradePrice = aData.trade_price;\n                    if (aData.order_price) orderPrice = aData.order_price;\n                    profit = 0;\n                    rate = 0;\n                    sumPrice = getSumPrice();\n                    unrealize_rate = 0;\n                    unrealize_profit = 0;\n                    unrealize_gain = sumPrice;\n                    break;\n                case \"Sell\":\n                    rate = getRate(aData);\n                    profit = getProfit(aData);\n                    sumProfit += profit;\n                    sumPrice = getSumPrice();\n\n                    unrealize_rate = rate;\n                    unrealize_profit = profit;\n                    unrealize_gain = sumPrice;\n                    break;\n                case \"Hold\":\n                    unrealize_rate = getRate(aData);\n                    unrealize_profit = getProfit(aData);\n                    unrealize_gain = sumPrice + getProfit(aData);\n                    break;\n                case \"Reserve\":\n                    profit = 0;\n                    rate = 0;\n                    sumPrice = getSumPrice();\n                    unrealize_rate = 0;\n                    unrealize_profit = 0;\n                    unrealize_gain = sumPrice;\n                    break;\n            }\n\n            return {\n                ...aData,\n                profit,\n                rate: rate * 100,\n                unrealize_rate: Number((unrealize_rate * 100).toFixed(2)),\n                unrealize_profit: Math.round(unrealize_profit) || 0,\n                unrealize_gain: Math.round(unrealize_gain),\n                sumProfit: Number(sumProfit.toFixed(2)),\n                sumPrice: Number(sumPrice.toFixed(2)),\n            };\n        });\n    }\n\n    private render() {\n        const tableElement = this.querySelector(\"tbody\") as HTMLElement;\n\n        tableElement.innerHTML = \"\";\n        const fragment = new DocumentFragment();\n\n        this.data\n            .map((aData: ICandles2, index) => this.createItem(aData, index))\n            .forEach((cloned: HTMLElement) => fragment.appendChild(cloned));\n\n        tableElement?.appendChild(fragment);\n    }\n\n    private createItem(aData: ICandles2, index: number) {\n        const tpElement = document.querySelector(\n            \"#tp-item\"\n        ) as HTMLTemplateElement;\n        tpElement;\n\n        const cloned = cloneTemplate<HTMLElement>(tpElement);\n        // if (!aData.moving_average_5) return cloned;\n\n        const parseData = {\n            // ...aData,\n            index,\n            candle_date_time_kst: aData.candle_date_time_kst.replace(\"T\", \" \"),\n            opening_price: aData.opening_price.toLocaleString(),\n            trade_price: aData.trade_price.toLocaleString(),\n\n            // moving_average_3:\n            //     (aData.moving_average_3 &&\n            //         aData.moving_average_3.toLocaleString()) ||\n            //     \"\",\n            // moving_average_5:\n            //     (aData.moving_average_5 &&\n            //         aData.moving_average_5.toLocaleString()) ||\n            //     \"\",\n            // moving_average_10:\n            //     (aData.moving_average_10 &&\n            //         aData.moving_average_10.toLocaleString()) ||\n            //     \"\",\n            // moving_average_20:\n            //     (aData.moving_average_20 &&\n            //         aData.moving_average_20.toLocaleString()) ||\n            //     \"\",\n\n            condition: aData.condition,\n            tradingAction: aData.tradingAction,\n\n            // daily_volatility: aData.daily_volatility && aData.daily_volatility,\n            volatility: (aData.volatility && aData.volatility) || \"\",\n            order_price:\n                (aData.order_price && aData.order_price.toLocaleString()) || \"\",\n\n            unrealize_rate: aData.unrealize_rate,\n            unrealize_profit: aData.unrealize_profit?.toLocaleString(),\n            unrealize_gain: aData.unrealize_gain?.toLocaleString(),\n\n            profit: aData.profit && Math.round(aData.profit).toLocaleString(),\n            rate: aData.rate && aData.rate.toFixed(2),\n            sumProfit:\n                aData.sumProfit && Math.round(aData.sumProfit).toLocaleString(),\n            sumPrice:\n                aData.sumPrice && Math.round(aData.sumPrice).toLocaleString(),\n        };\n\n        // console.log(\"parseData\", parseData);\n\n        updateElementsTextWithData(parseData, cloned);\n\n        cloned.dataset.action = aData.tradingAction;\n\n        return cloned;\n    }\n\n    private renderSummary() {\n        if (this.data.length === 0) return;\n\n        const tpElement = document.querySelector(\n            \"#tp-summary\"\n        ) as HTMLTemplateElement;\n\n        const summaryListElement = this.querySelector(\n            \".summary-list\"\n        ) as HTMLElement;\n\n        const cloned = cloneTemplate<HTMLElement>(tpElement);\n        const deleteButton = cloned.querySelector(\n            \".deleteButton\"\n        ) as HTMLButtonElement;\n\n        const lastProfit = this.data[this.data.length - 1].sumProfit;\n        if (lastProfit === undefined) return;\n\n        const totalRate = (lastProfit / this.investmentPrice) * 100;\n        const summaryData = {\n            market: this.market,\n            period: this.count,\n            totalRate: `${totalRate.toFixed(2)} %`,\n            lastProfit: ` ${Math.round(lastProfit).toLocaleString()} \uC6D0`,\n        };\n\n        updateElementsTextWithData(summaryData, cloned);\n\n        summaryListElement.appendChild(cloned);\n\n        // summary-all\n        this.summaryAllPrice += lastProfit;\n        this.allSumSize++;\n\n        this.renderAllSum();\n\n        // delete\n\n        deleteButton.addEventListener(\"click\", () => {\n            cloned.remove();\n            this.summaryAllPrice -= lastProfit;\n            this.allSumSize--;\n\n            this.renderAllSum();\n        });\n    }\n\n    private renderAllSum() {\n        const summaryAllElement = this.querySelector(\n            \".summary-all\"\n        ) as HTMLElement;\n\n        const summaryAllRate =\n            (this.summaryAllPrice / (this.allSumSize * this.investmentPrice)) *\n                100 || 0;\n        const allSumData = {\n            summaryAllPrice: Math.round(this.summaryAllPrice).toLocaleString(),\n            summaryAllRate: summaryAllRate.toFixed(2).toLocaleString(),\n        };\n\n        updateElementsTextWithData(allSumData, summaryAllElement);\n    }\n\n    private onChangeMarket(event: Event) {\n        const target = event.target as HTMLInputElement;\n        this.market = target.value;\n        this.loadAndProcessData();\n    }\n\n    private onOptionSubmit(event: Event) {\n        event?.preventDefault();\n        const maxSize = Number(this.countElement.getAttribute(\"max\"));\n\n        this.count =\n            Number(this.countElement.value) > maxSize\n                ? maxSize\n                : Number(this.countElement.value);\n\n        this.countElement.value = this.count.toString();\n\n        this.loadAndProcessData();\n    }\n}\n", "import AppBacktest2 from \"./AppBacktest2\";\n\ncustomElements.define(\"app-backtest2\", AppBacktest2);\n"],
  "mappings": ";;;AAAA,WAAS,iBAAiB,MAAa,SAAS,GAAG;AAC/C,UAAM,SAAS,KAAK,IAAI,CAAC,OAAO,UAAU;AACtC,UAAI,QAAQ,SAAS,GAAG;AACpB,eAAO;AAAA,MACX;AAEA,YAAM,UAAU,uBAAuB,MAAM,OAAO,MAAM;AAE1D,aAAO;AAAA,QACH,GAAG;AAAA,QACH,CAAC,kBAAkB,MAAM,EAAE,GAAG;AAAA,MAClC;AAAA,IACJ,CAAC;AAED,WAAO;AAAA,EACX;AAEA,WAAS,uBAAuB,MAAW,OAAe,SAAS,GAAG;AAClE,QAAI,MAAM;AAEV,aAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC7B,aAAO,KAAK,QAAQ,CAAC,EAAE;AAAA,IAC3B;AAEA,WAAO,MAAM;AAAA,EACjB;;;ACvBA,WAAS,mBAAmB,OAAY;AACpC,UAAM,UACA,MAAM,aAAa,MAAM,aAAa,MAAM,gBAAiB;AAEnE,WAAO,OAAO,OAAO,QAAQ,CAAC,CAAC;AAAA,EACnC;AAEA,WAAS,cAAc,UAAe,OAAe;AACjD,QAAI,QAAQ,GAAG;AACX;AAAA,IACJ;AAEA,QAAI,MAAM;AAMV,aAAS,IAAI,QAAQ,GAAG,IAAI,OAAO,KAAK;AACpC,aAAO,SAAS,CAAC,EAAE;AAAA,IACvB;AAEA,WAAO,QAAQ,MAAM,GAAG,QAAQ,CAAC,CAAC;AAAA,EACtC;;;ACzBO,WAAS,cACZ,UACF;AACE,UAAM,UAAU,SAAS,QAAQ;AACjC,QAAI,CAAC,SAAS;AACV,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC/C;AACA,WAAO,QAAQ,UAAU,IAAI;AAAA,EACjC;AAEO,WAAS,2BAA8B,MAAS,WAAwB;AAC3E,WAAO,QAAQ,IAA+B,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AACtE,YAAM,UAAU,UAAU,cAAc,IAAI,GAAG,EAAE;AAEjD,cAAQ,cAAc,OAAO,KAAK;AAAA,IACtC,CAAC;AAAA,EACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACaA,MAAqB,eAArB,cAA0C,YAAW;IAcjD,cAAA;AACI,YAAK;AAEL,WAAK,OAAO,CAAA;AACZ,WAAK,SAAS;AACd,WAAK,QAAQ;AACb,WAAK,aAAa;AAClB,WAAK,uBAAuB;AAC5B,WAAK,kBAAkB,KAAK,uBAAuB,KAAK;AACxD,WAAK,kBAAkB;AACvB,WAAK,aAAa;AAClB,WAAK,SAAS;AAEd,WAAK,eAAe,KAAK,cACrB,mBAAmB;AAEvB,WAAK,gBAAgB,KAAK,cAAc,QAAQ;AAChD,WAAK,cAAc,KAAK,cAAc,MAAM;AAE5C,WAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI;AACnD,WAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI;IACvD;IAEA,oBAAiB;AACb,WAAK,WAAU;AACf,WAAK,mBAAkB;AAEvB,WAAK,cAAc,iBAAiB,UAAU,KAAK,cAAc;AACjE,WAAK,YAAY,iBAAiB,UAAU,KAAK,cAAc;IACnE;IAEA,uBAAoB;AAChB,WAAK,cAAc,oBAAoB,UAAU,KAAK,cAAc;AACpE,WAAK,YAAY,oBAAoB,UAAU,KAAK,cAAc;IACtE;IAEQ,aAAU;AACd,WAAK,SAAS,KAAK,cAAc;AACjC,WAAK,aAAa,QAAQ,KAAK,MAAM,SAAQ;AAC5C,WAAK,cAAc,kBAAkB,EAAkB,cACpD,KAAK,gBAAgB,eAAc;IAC3C;IAEM,qBAAkB;;AAEpB,cAAM,UAAU,MAAM,KAAK,gBAAe;AAE1C,cAAM,oBAAoB,KAAK,wBAAwB,OAAO;AAE9D,cAAM,qBACF,KAAK,2BAA2B,iBAAiB;AAErD,cAAM,iBAAiB,KAAK,sBAAsB,kBAAkB;AAEpE,cAAM,qBAAqB,KAAK,oBAAoB,cAAc;AAElE,cAAM,cAAc,KAAK,YAAY,kBAAkB;AACvD,cAAM,kBAAkB,KAAK,iBAAiB,WAAW;AAGzD,aAAK,OAAO,gBAAgB,MAAM,EAAE;AAGpC,aAAK,OAAM;AACX,aAAK,cAAa;MACtB,CAAC;;IAEa,kBAAe;;AACzB,cAAM,eAAe,IAAI,gBAAgB;UACrC,QAAQ,KAAK;UACb,QAAQ,KAAK,QAAQ,IAAI,SAAQ;SACpC;AAED,cAAM,WAAW,MAAM,MAAM,iBAAiB,YAAY,EAAE;AAC5D,YAAI,CAAC,SAAS,IAAI;AACd,gBAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;;AAE5D,eAAO,MAAM,SAAS,KAAI;MAC9B,CAAC;;IAEO,wBAAwB,YAAuB;AACnD,UAAI,OAAO,iBAAiB,YAAY,CAAC;AACzC,aAAO,iBAAiB,MAAM,CAAC;AAC/B,aAAO,iBAAiB,MAAM,EAAE;AAChC,aAAO,iBAAiB,MAAM,EAAE;AAEhC,aAAO;IACX;IAEQ,2BAA2B,UAAqB;AACpD,aAAO,SAAS,IAAI,CAAC,SAAQ;AACzB,cAAM,uBACF,KAAK,cAAc,KAAK,oBACxB,KAAK,cAAc,KAAK,oBACxB,KAAK,cAAc,KAAK,qBACxB,KAAK,cAAc,KAAK,oBAClB,OACA;AAEV,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GAAY,IAAI,GAAA,EAAE,WAAW,qBAAoB,CAAA;MACrD,CAAC;IACL;IAEQ,sBAAsB,UAAqB;AAC/C,aAAO,SAAS,IAAI,CAAC,MAAM,UAAS;AAChC,YAAI,gBAAgB;AAEpB,YAAI,UAAU,GAAG;AACb,0BAAgB,KAAK,YAAY,QAAQ;eACtC;AACH,gBAAM,gBAAgB,SAAS,QAAQ,CAAC,EAAE;AAC1C,cAAI,kBAAkB,KAAK,WAAW;AAClC,4BAAgB,KAAK,YAAY,QAAQ;iBACtC;AACH,4BAAgB,KAAK,YAAY,SAAS;;;AAIlD,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,IAAI,GAAA,EACP,cAAa,CAAA;MAErB,CAAC;IACL;IAEQ,oBAAoB,UAAqB;AAC7C,YAAM,YAAY,SAAS,IAAI,CAAC,UAAS;AACrC,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,KAAK,GAAA,EACR,kBAAkB,mBAAmB,KAAK,EAAC,CAAA;MAEnD,CAAC;AAED,YAAM,SAAS,UAAU,IAAI,CAAC,OAAO,UAAS;AAC1C,cAAM,aAAa,cAAc,WAAW,KAAK;AACjD,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,KAAK,GAAA,EACR,WAAU,CAAA;MAElB,CAAC;AAED,aAAO;IACX;IAEQ,YAAY,UAAqB;AACrC,aAAO,SAAS,IAAI,CAAC,UAAS;AAC1B,YAAI,MAAM,kBAAkB,SAAS,MAAM,YAAY;AACnD,gBAAM,UAAW,KAAK,SAAS,MAAM,aAAc;AACnD,gBAAM,cAAc,UAAU,KAAK;AACnC,gBAAM,SAAU,KAAK,uBAAuB,cAAe;AAE3D,iBAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GAAY,KAAK,GAAA,EAAE,aAAa,KAAK,MAAM,MAAM,EAAC,CAAA;;AAEtD,eAAA,OAAA,OAAA,CAAA,GAAY,KAAK;MACrB,CAAC;IACL;IAEQ,iBAAiB,UAAqB;AAC1C,UAAI,gBAAgB;AACpB,UAAI,aAAa;AACjB,UAAI,SAAS;AACb,UAAI,OAAO;AAEX,UAAI,iBAAiB;AACrB,UAAI,iBAAiB;AACrB,UAAI,mBAAmB;AAEvB,UAAI,YAAY;AAChB,UAAI,WAAW,KAAK;AAEpB,YAAM,UAAU,CAAC,WACZ,MAAM,cAAc,iBAAiB;AAC1C,YAAM,YAAY,CAAC,UAAqB,aAAa,QAAQ,KAAK;AAClE,YAAM,cAAc,MAAM,KAAK,kBAAkB;AAEjD,aAAO,SAAS,IAAI,CAAC,UAAS;AAC1B,gBAAQ,MAAM,eAAe;UACzB,KAAK;AACD,4BAAgB,MAAM;AACtB,gBAAI,MAAM;AAAa,2BAAa,MAAM;AAC1C,qBAAS;AACT,mBAAO;AACP,uBAAW,YAAW;AACtB,6BAAiB;AACjB,+BAAmB;AACnB,6BAAiB;AACjB;UACJ,KAAK;AACD,mBAAO,QAAQ,KAAK;AACpB,qBAAS,UAAU,KAAK;AACxB,yBAAa;AACb,uBAAW,YAAW;AAEtB,6BAAiB;AACjB,+BAAmB;AACnB,6BAAiB;AACjB;UACJ,KAAK;AACD,6BAAiB,QAAQ,KAAK;AAC9B,+BAAmB,UAAU,KAAK;AAClC,6BAAiB,WAAW,UAAU,KAAK;AAC3C;UACJ,KAAK;AACD,qBAAS;AACT,mBAAO;AACP,uBAAW,YAAW;AACtB,6BAAiB;AACjB,+BAAmB;AACnB,6BAAiB;AACjB;;AAGR,eAAA,OAAA,OAAA,OAAA,OAAA,CAAA,GACO,KAAK,GAAA,EACR,QACA,MAAM,OAAO,KACb,gBAAgB,QAAQ,iBAAiB,KAAK,QAAQ,CAAC,CAAC,GACxD,kBAAkB,KAAK,MAAM,gBAAgB,KAAK,GAClD,gBAAgB,KAAK,MAAM,cAAc,GACzC,WAAW,OAAO,UAAU,QAAQ,CAAC,CAAC,GACtC,UAAU,OAAO,SAAS,QAAQ,CAAC,CAAC,EAAC,CAAA;MAE7C,CAAC;IACL;IAEQ,SAAM;AACV,YAAM,eAAe,KAAK,cAAc,OAAO;AAE/C,mBAAa,YAAY;AACzB,YAAM,WAAW,IAAI,iBAAgB;AAErC,WAAK,KACA,IAAI,CAAC,OAAkB,UAAU,KAAK,WAAW,OAAO,KAAK,CAAC,EAC9D,QAAQ,CAAC,WAAwB,SAAS,YAAY,MAAM,CAAC;AAElE,uBAAY,QAAZ,iBAAY,SAAA,SAAZ,aAAc,YAAY,QAAQ;IACtC;IAEQ,WAAW,OAAkB,OAAa;;AAC9C,YAAM,YAAY,SAAS,cACvB,UAAU;AAEd;AAEA,YAAM,SAAS,cAA2B,SAAS;AAGnD,YAAM,YAAY;QAEd;QACA,sBAAsB,MAAM,qBAAqB,QAAQ,KAAK,GAAG;QACjE,eAAe,MAAM,cAAc,eAAc;QACjD,aAAa,MAAM,YAAY,eAAc;QAmB7C,WAAW,MAAM;QACjB,eAAe,MAAM;QAGrB,YAAa,MAAM,cAAc,MAAM,cAAe;QACtD,aACK,MAAM,eAAe,MAAM,YAAY,eAAc,KAAO;QAEjE,gBAAgB,MAAM;QACtB,mBAAkB,KAAA,MAAM,sBAAgB,QAAA,OAAA,SAAA,SAAA,GAAE,eAAc;QACxD,iBAAgB,KAAA,MAAM,oBAAc,QAAA,OAAA,SAAA,SAAA,GAAE,eAAc;QAEpD,QAAQ,MAAM,UAAU,KAAK,MAAM,MAAM,MAAM,EAAE,eAAc;QAC/D,MAAM,MAAM,QAAQ,MAAM,KAAK,QAAQ,CAAC;QACxC,WACI,MAAM,aAAa,KAAK,MAAM,MAAM,SAAS,EAAE,eAAc;QACjE,UACI,MAAM,YAAY,KAAK,MAAM,MAAM,QAAQ,EAAE,eAAc;;AAKnE,iCAA2B,WAAW,MAAM;AAE5C,aAAO,QAAQ,SAAS,MAAM;AAE9B,aAAO;IACX;IAEQ,gBAAa;AACjB,UAAI,KAAK,KAAK,WAAW;AAAG;AAE5B,YAAM,YAAY,SAAS,cACvB,aAAa;AAGjB,YAAM,qBAAqB,KAAK,cAC5B,eAAe;AAGnB,YAAM,SAAS,cAA2B,SAAS;AACnD,YAAM,eAAe,OAAO,cACxB,eAAe;AAGnB,YAAM,aAAa,KAAK,KAAK,KAAK,KAAK,SAAS,CAAC,EAAE;AACnD,UAAI,eAAe;AAAW;AAE9B,YAAM,YAAa,aAAa,KAAK,kBAAmB;AACxD,YAAM,cAAc;QAChB,QAAQ,KAAK;QACb,QAAQ,KAAK;QACb,WAAW,GAAG,UAAU,QAAQ,CAAC,CAAC;QAClC,YAAY,IAAI,KAAK,MAAM,UAAU,EAAE,eAAc,CAAE;;AAG3D,iCAA2B,aAAa,MAAM;AAE9C,yBAAmB,YAAY,MAAM;AAGrC,WAAK,mBAAmB;AACxB,WAAK;AAEL,WAAK,aAAY;AAIjB,mBAAa,iBAAiB,SAAS,MAAK;AACxC,eAAO,OAAM;AACb,aAAK,mBAAmB;AACxB,aAAK;AAEL,aAAK,aAAY;MACrB,CAAC;IACL;IAEQ,eAAY;AAChB,YAAM,oBAAoB,KAAK,cAC3B,cAAc;AAGlB,YAAM,iBACD,KAAK,mBAAmB,KAAK,aAAa,KAAK,mBAC5C,OAAO;AACf,YAAM,aAAa;QACf,iBAAiB,KAAK,MAAM,KAAK,eAAe,EAAE,eAAc;QAChE,gBAAgB,eAAe,QAAQ,CAAC,EAAE,eAAc;;AAG5D,iCAA2B,YAAY,iBAAiB;IAC5D;IAEQ,eAAe,OAAY;AAC/B,YAAM,SAAS,MAAM;AACrB,WAAK,SAAS,OAAO;AACrB,WAAK,mBAAkB;IAC3B;IAEQ,eAAe,OAAY;AAC/B,gBAAK,QAAL,UAAK,SAAA,SAAL,MAAO,eAAc;AACrB,YAAM,UAAU,OAAO,KAAK,aAAa,aAAa,KAAK,CAAC;AAE5D,WAAK,QACD,OAAO,KAAK,aAAa,KAAK,IAAI,UAC5B,UACA,OAAO,KAAK,aAAa,KAAK;AAExC,WAAK,aAAa,QAAQ,KAAK,MAAM,SAAQ;AAE7C,WAAK,mBAAkB;IAC3B;;;;ACvaJ,iBAAe,OAAO,iBAAiB,YAAY;",
  "names": []
}
